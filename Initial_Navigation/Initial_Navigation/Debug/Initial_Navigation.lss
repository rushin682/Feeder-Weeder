
Initial_Navigation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  000010c8  0000115c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800218  00800218  00001174  2**0
                  ALLOC
  3 .stab         00001c68  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005e5  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000033c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000157e  00000000  00000000  00003468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e2  00000000  00000000  000049e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074f  00000000  00000000  00004dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000508  00000000  00000000  00005518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ab  00000000  00000000  00005a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b7d  00000000  00000000  00005fcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_5>
      18:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ec       	ldi	r30, 0xC8	; 200
      fc:	f0 e1       	ldi	r31, 0x10	; 16
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 31       	cpi	r26, 0x18	; 24
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a8 e1       	ldi	r26, 0x18	; 24
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 34       	cpi	r26, 0x4C	; 76
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <main>
     122:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <readSensor>:
	}
	stop(); //Stop robot
}

void readSensor()
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
	highcurrent=0;
     12e:	10 92 19 02 	sts	0x0219, r1
     132:	10 92 18 02 	sts	0x0218, r1
	highcount=0;
     136:	10 92 1b 02 	sts	0x021B, r1
     13a:	10 92 1a 02 	sts	0x021A, r1
	sensor(0,th[0],avg[0]);
     13e:	c2 e0       	ldi	r28, 0x02	; 2
     140:	d3 e0       	ldi	r29, 0x03	; 3
     142:	60 91 20 02 	lds	r22, 0x0220
     146:	70 91 21 02 	lds	r23, 0x0221
     14a:	40 91 11 02 	lds	r20, 0x0211
     14e:	50 91 12 02 	lds	r21, 0x0212
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	fe 01       	movw	r30, r28
     158:	19 95       	eicall
	sensor(1,th[1],avg[1]);
     15a:	60 91 22 02 	lds	r22, 0x0222
     15e:	70 91 23 02 	lds	r23, 0x0223
     162:	40 91 13 02 	lds	r20, 0x0213
     166:	50 91 14 02 	lds	r21, 0x0214
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	fe 01       	movw	r30, r28
     170:	19 95       	eicall
	sensor(2,th[2],avg[2]);
     172:	60 91 24 02 	lds	r22, 0x0224
     176:	70 91 25 02 	lds	r23, 0x0225
     17a:	40 91 15 02 	lds	r20, 0x0215
     17e:	50 91 16 02 	lds	r21, 0x0216
     182:	82 e0       	ldi	r24, 0x02	; 2
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	fe 01       	movw	r30, r28
     188:	19 95       	eicall
}
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	08 95       	ret

00000190 <proportional>:
		th[n]=0;
	}
	lcd_print(1, 3-n, th[n], 1);
}
void proportional()
{
     190:	cf 92       	push	r12
     192:	df 92       	push	r13
     194:	ef 92       	push	r14
     196:	ff 92       	push	r15
	error = ((double)highcurrent/highcount)-target;
     198:	60 91 18 02 	lds	r22, 0x0218
     19c:	70 91 19 02 	lds	r23, 0x0219
     1a0:	88 27       	eor	r24, r24
     1a2:	77 fd       	sbrc	r23, 7
     1a4:	80 95       	com	r24
     1a6:	98 2f       	mov	r25, r24
     1a8:	0e 94 c2 07 	call	0xf84	; 0xf84 <__floatsisf>
     1ac:	6b 01       	movw	r12, r22
     1ae:	7c 01       	movw	r14, r24
     1b0:	60 91 1a 02 	lds	r22, 0x021A
     1b4:	70 91 1b 02 	lds	r23, 0x021B
     1b8:	88 27       	eor	r24, r24
     1ba:	77 fd       	sbrc	r23, 7
     1bc:	80 95       	com	r24
     1be:	98 2f       	mov	r25, r24
     1c0:	0e 94 c2 07 	call	0xf84	; 0xf84 <__floatsisf>
     1c4:	9b 01       	movw	r18, r22
     1c6:	ac 01       	movw	r20, r24
     1c8:	c7 01       	movw	r24, r14
     1ca:	b6 01       	movw	r22, r12
     1cc:	0e 94 27 07 	call	0xe4e	; 0xe4e <__divsf3>
     1d0:	6b 01       	movw	r12, r22
     1d2:	7c 01       	movw	r14, r24
     1d4:	60 91 0f 02 	lds	r22, 0x020F
     1d8:	70 91 10 02 	lds	r23, 0x0210
     1dc:	88 27       	eor	r24, r24
     1de:	77 fd       	sbrc	r23, 7
     1e0:	80 95       	com	r24
     1e2:	98 2f       	mov	r25, r24
     1e4:	0e 94 c2 07 	call	0xf84	; 0xf84 <__floatsisf>
     1e8:	9b 01       	movw	r18, r22
     1ea:	ac 01       	movw	r20, r24
     1ec:	c7 01       	movw	r24, r14
     1ee:	b6 01       	movw	r22, r12
     1f0:	0e 94 c2 06 	call	0xd84	; 0xd84 <__subsf3>
     1f4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__fixsfsi>
     1f8:	ab 01       	movw	r20, r22
     1fa:	bc 01       	movw	r22, r24
     1fc:	ca 01       	movw	r24, r20
     1fe:	50 93 1f 02 	sts	0x021F, r21
     202:	40 93 1e 02 	sts	0x021E, r20
	p=(kp*error);
     206:	40 91 0d 02 	lds	r20, 0x020D
     20a:	50 91 0e 02 	lds	r21, 0x020E
     20e:	84 9f       	mul	r24, r20
     210:	90 01       	movw	r18, r0
     212:	85 9f       	mul	r24, r21
     214:	30 0d       	add	r19, r0
     216:	94 9f       	mul	r25, r20
     218:	30 0d       	add	r19, r0
     21a:	11 24       	eor	r1, r1
     21c:	30 93 1d 02 	sts	0x021D, r19
     220:	20 93 1c 02 	sts	0x021C, r18
	if(th[0]==0 && th[1]==0 && th[2]==0)
     224:	80 91 20 02 	lds	r24, 0x0220
     228:	90 91 21 02 	lds	r25, 0x0221
     22c:	00 97       	sbiw	r24, 0x00	; 0
     22e:	81 f4       	brne	.+32     	; 0x250 <proportional+0xc0>
     230:	80 91 22 02 	lds	r24, 0x0222
     234:	90 91 23 02 	lds	r25, 0x0223
     238:	00 97       	sbiw	r24, 0x00	; 0
     23a:	51 f4       	brne	.+20     	; 0x250 <proportional+0xc0>
     23c:	80 91 24 02 	lds	r24, 0x0224
     240:	90 91 25 02 	lds	r25, 0x0225
     244:	00 97       	sbiw	r24, 0x00	; 0
     246:	21 f4       	brne	.+8      	; 0x250 <proportional+0xc0>
	{
		p=0;
     248:	10 92 1d 02 	sts	0x021D, r1
     24c:	10 92 1c 02 	sts	0x021C, r1
	}
}
     250:	ff 90       	pop	r15
     252:	ef 90       	pop	r14
     254:	df 90       	pop	r13
     256:	cf 90       	pop	r12
     258:	08 95       	ret

0000025a <buzzer_pin_config>:
Logic: Setting PORTC3 as output which is the pin connected to the buzzer
Example Call: buzzer_pin_config()
*/
void buzzer_pin_config(void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     25a:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     25c:	43 98       	cbi	0x08, 3	; 8
}
     25e:	08 95       	ret

00000260 <buzzer_on>:
Example Call: buzzer_on ()
*/
void buzzer_on(void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     260:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
     262:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
     264:	88 b9       	out	0x08, r24	; 8
}
     266:	08 95       	ret

00000268 <buzzer_off>:
Example Call: buzzer_off()
*/
void buzzer_off(void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     268:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
     26a:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
     26c:	88 b9       	out	0x08, r24	; 8
}
     26e:	08 95       	ret

00000270 <buzzer_beep>:
Logic: Turns the buzzer on and off by writing 1 & 0 to PC3
Example Call: buzzer_beep()
*/
void buzzer_beep()
{
	buzzer_on();
     270:	0e 94 30 01 	call	0x260	; 0x260 <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     274:	8f ef       	ldi	r24, 0xFF	; 255
     276:	9f ef       	ldi	r25, 0xFF	; 255
     278:	a8 e0       	ldi	r26, 0x08	; 8
     27a:	81 50       	subi	r24, 0x01	; 1
     27c:	90 40       	sbci	r25, 0x00	; 0
     27e:	a0 40       	sbci	r26, 0x00	; 0
     280:	e1 f7       	brne	.-8      	; 0x27a <buzzer_beep+0xa>
     282:	00 c0       	rjmp	.+0      	; 0x284 <buzzer_beep+0x14>
     284:	00 00       	nop
	_delay_ms(200);
	buzzer_off();
     286:	0e 94 34 01 	call	0x268	; 0x268 <buzzer_off>
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	9f ef       	ldi	r25, 0xFF	; 255
     28e:	a8 e0       	ldi	r26, 0x08	; 8
     290:	81 50       	subi	r24, 0x01	; 1
     292:	90 40       	sbci	r25, 0x00	; 0
     294:	a0 40       	sbci	r26, 0x00	; 0
     296:	e1 f7       	brne	.-8      	; 0x290 <buzzer_beep+0x20>
     298:	00 c0       	rjmp	.+0      	; 0x29a <buzzer_beep+0x2a>
     29a:	00 00       	nop
	_delay_ms(200);
}
     29c:	08 95       	ret

0000029e <lcd_set_4bit>:
     29e:	86 e6       	ldi	r24, 0x66	; 102
     2a0:	9e e0       	ldi	r25, 0x0E	; 14
     2a2:	01 97       	sbiw	r24, 0x01	; 1
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <lcd_set_4bit+0x4>
     2a6:	00 00       	nop
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2a8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2aa:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     2ac:	80 e3       	ldi	r24, 0x30	; 48
     2ae:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2b0:	42 9a       	sbi	0x08, 2	; 8
     2b2:	ef ef       	ldi	r30, 0xFF	; 255
     2b4:	f7 e4       	ldi	r31, 0x47	; 71
     2b6:	31 97       	sbiw	r30, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <lcd_set_4bit+0x18>
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <lcd_set_4bit+0x1e>
     2bc:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2be:	42 98       	cbi	0x08, 2	; 8
     2c0:	e6 e6       	ldi	r30, 0x66	; 102
     2c2:	fe e0       	ldi	r31, 0x0E	; 14
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_set_4bit+0x26>
     2c8:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2ca:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2cc:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     2ce:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2d0:	42 9a       	sbi	0x08, 2	; 8
     2d2:	ef ef       	ldi	r30, 0xFF	; 255
     2d4:	f7 e4       	ldi	r31, 0x47	; 71
     2d6:	31 97       	sbiw	r30, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_set_4bit+0x38>
     2da:	00 c0       	rjmp	.+0      	; 0x2dc <lcd_set_4bit+0x3e>
     2dc:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2de:	42 98       	cbi	0x08, 2	; 8
     2e0:	e6 e6       	ldi	r30, 0x66	; 102
     2e2:	fe e0       	ldi	r31, 0x0E	; 14
     2e4:	31 97       	sbiw	r30, 0x01	; 1
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <lcd_set_4bit+0x46>
     2e8:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2ea:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2ec:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     2ee:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2f0:	42 9a       	sbi	0x08, 2	; 8
     2f2:	8f ef       	ldi	r24, 0xFF	; 255
     2f4:	97 e4       	ldi	r25, 0x47	; 71
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_set_4bit+0x58>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_set_4bit+0x5e>
     2fc:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2fe:	42 98       	cbi	0x08, 2	; 8
     300:	e6 e6       	ldi	r30, 0x66	; 102
     302:	fe e0       	ldi	r31, 0x0E	; 14
     304:	31 97       	sbiw	r30, 0x01	; 1
     306:	f1 f7       	brne	.-4      	; 0x304 <lcd_set_4bit+0x66>
     308:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     30a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     30c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     30e:	80 e2       	ldi	r24, 0x20	; 32
     310:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     312:	42 9a       	sbi	0x08, 2	; 8
     314:	8f ef       	ldi	r24, 0xFF	; 255
     316:	97 e4       	ldi	r25, 0x47	; 71
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <lcd_set_4bit+0x7a>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <lcd_set_4bit+0x80>
     31e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     320:	42 98       	cbi	0x08, 2	; 8

	
}
     322:	08 95       	ret

00000324 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     324:	98 b1       	in	r25, 0x08	; 8
     326:	9f 70       	andi	r25, 0x0F	; 15
     328:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     32a:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     32c:	28 2f       	mov	r18, r24
     32e:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     330:	92 2b       	or	r25, r18
     332:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     334:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     336:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     338:	42 9a       	sbi	0x08, 2	; 8
     33a:	ef ef       	ldi	r30, 0xFF	; 255
     33c:	f7 e4       	ldi	r31, 0x47	; 71
     33e:	31 97       	sbiw	r30, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <lcd_wr_command+0x1a>
     342:	00 c0       	rjmp	.+0      	; 0x344 <lcd_wr_command+0x20>
     344:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     346:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     348:	98 b1       	in	r25, 0x08	; 8
     34a:	9f 70       	andi	r25, 0x0F	; 15
     34c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     34e:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     350:	82 95       	swap	r24
     352:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     354:	89 2b       	or	r24, r25
     356:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     358:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     35a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     35c:	42 9a       	sbi	0x08, 2	; 8
     35e:	8f ef       	ldi	r24, 0xFF	; 255
     360:	97 e4       	ldi	r25, 0x47	; 71
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <lcd_wr_command+0x3e>
     366:	00 c0       	rjmp	.+0      	; 0x368 <lcd_wr_command+0x44>
     368:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     36a:	42 98       	cbi	0x08, 2	; 8
}
     36c:	08 95       	ret

0000036e <lcd_init>:
     36e:	86 e6       	ldi	r24, 0x66	; 102
     370:	9e e0       	ldi	r25, 0x0E	; 14
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <lcd_init+0x4>
     376:	00 00       	nop
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     378:	88 e2       	ldi	r24, 0x28	; 40
     37a:	0e 94 92 01 	call	0x324	; 0x324 <lcd_wr_command>
	lcd_wr_command(0x01);
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 92 01 	call	0x324	; 0x324 <lcd_wr_command>
	lcd_wr_command(0x06);
     384:	86 e0       	ldi	r24, 0x06	; 6
     386:	0e 94 92 01 	call	0x324	; 0x324 <lcd_wr_command>
	lcd_wr_command(0x0E);
     38a:	8e e0       	ldi	r24, 0x0E	; 14
     38c:	0e 94 92 01 	call	0x324	; 0x324 <lcd_wr_command>
	lcd_wr_command(0x80);
     390:	80 e8       	ldi	r24, 0x80	; 128
     392:	0e 94 92 01 	call	0x324	; 0x324 <lcd_wr_command>
		
}
     396:	08 95       	ret

00000398 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     398:	98 b1       	in	r25, 0x08	; 8
     39a:	9f 70       	andi	r25, 0x0F	; 15
     39c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     39e:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     3a0:	28 2f       	mov	r18, r24
     3a2:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     3a4:	92 2b       	or	r25, r18
     3a6:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     3a8:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     3aa:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     3ac:	42 9a       	sbi	0x08, 2	; 8
     3ae:	ef ef       	ldi	r30, 0xFF	; 255
     3b0:	f7 e4       	ldi	r31, 0x47	; 71
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcd_wr_char+0x1a>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <lcd_wr_char+0x20>
     3b8:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3ba:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     3bc:	98 b1       	in	r25, 0x08	; 8
     3be:	9f 70       	andi	r25, 0x0F	; 15
     3c0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     3c2:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     3c4:	82 95       	swap	r24
     3c6:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     3c8:	89 2b       	or	r24, r25
     3ca:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     3cc:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     3ce:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     3d0:	42 9a       	sbi	0x08, 2	; 8
     3d2:	8f ef       	ldi	r24, 0xFF	; 255
     3d4:	97 e4       	ldi	r25, 0x47	; 71
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_wr_char+0x3e>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <lcd_wr_char+0x44>
     3dc:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3de:	42 98       	cbi	0x08, 2	; 8
}
     3e0:	08 95       	ret

000003e2 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     3e2:	80 e8       	ldi	r24, 0x80	; 128
     3e4:	0e 94 92 01 	call	0x324	; 0x324 <lcd_wr_command>
}
     3e8:	08 95       	ret

000003ea <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	ec 01       	movw	r28, r24
	while(*str != '\0')
     3f0:	88 81       	ld	r24, Y
     3f2:	88 23       	and	r24, r24
     3f4:	31 f0       	breq	.+12     	; 0x402 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
     3f6:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     3f8:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_wr_char>


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     3fc:	89 91       	ld	r24, Y+
     3fe:	88 23       	and	r24, r24
     400:	d9 f7       	brne	.-10     	; 0x3f8 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	08 95       	ret

00000408 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     408:	82 30       	cpi	r24, 0x02	; 2
     40a:	79 f0       	breq	.+30     	; 0x42a <lcd_cursor+0x22>
     40c:	83 30       	cpi	r24, 0x03	; 3
     40e:	18 f4       	brcc	.+6      	; 0x416 <lcd_cursor+0xe>
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	c9 f4       	brne	.+50     	; 0x446 <lcd_cursor+0x3e>
     414:	05 c0       	rjmp	.+10     	; 0x420 <lcd_cursor+0x18>
     416:	83 30       	cpi	r24, 0x03	; 3
     418:	69 f0       	breq	.+26     	; 0x434 <lcd_cursor+0x2c>
     41a:	84 30       	cpi	r24, 0x04	; 4
     41c:	a1 f4       	brne	.+40     	; 0x446 <lcd_cursor+0x3e>
     41e:	0f c0       	rjmp	.+30     	; 0x43e <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     420:	86 2f       	mov	r24, r22
     422:	81 58       	subi	r24, 0x81	; 129
     424:	0e 94 92 01 	call	0x324	; 0x324 <lcd_wr_command>
     428:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     42a:	86 2f       	mov	r24, r22
     42c:	81 54       	subi	r24, 0x41	; 65
     42e:	0e 94 92 01 	call	0x324	; 0x324 <lcd_wr_command>
     432:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     434:	86 2f       	mov	r24, r22
     436:	8d 56       	subi	r24, 0x6D	; 109
     438:	0e 94 92 01 	call	0x324	; 0x324 <lcd_wr_command>
     43c:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     43e:	86 2f       	mov	r24, r22
     440:	8d 52       	subi	r24, 0x2D	; 45
     442:	0e 94 92 01 	call	0x324	; 0x324 <lcd_wr_command>
     446:	08 95       	ret

00000448 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	8a 01       	movw	r16, r20
     452:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     454:	88 23       	and	r24, r24
     456:	11 f0       	breq	.+4      	; 0x45c <lcd_print+0x14>
     458:	66 23       	and	r22, r22
     45a:	19 f4       	brne	.+6      	; 0x462 <lcd_print+0x1a>
	{
		lcd_home();
     45c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <lcd_home>
     460:	02 c0       	rjmp	.+4      	; 0x466 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     462:	0e 94 04 02 	call	0x408	; 0x408 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     466:	c5 30       	cpi	r28, 0x05	; 5
     468:	d1 05       	cpc	r29, r1
     46a:	71 f4       	brne	.+28     	; 0x488 <lcd_print+0x40>
	{
		million=value/10000+48;
     46c:	c8 01       	movw	r24, r16
     46e:	60 e1       	ldi	r22, 0x10	; 16
     470:	77 e2       	ldi	r23, 0x27	; 39
     472:	0e 94 4e 08 	call	0x109c	; 0x109c <__udivmodhi4>
     476:	cb 01       	movw	r24, r22
     478:	c0 96       	adiw	r24, 0x30	; 48
     47a:	90 93 3d 02 	sts	0x023D, r25
     47e:	80 93 3c 02 	sts	0x023C, r24
		lcd_wr_char(million);
     482:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_wr_char>
     486:	03 c0       	rjmp	.+6      	; 0x48e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     488:	c4 30       	cpi	r28, 0x04	; 4
     48a:	d1 05       	cpc	r29, r1
     48c:	b9 f4       	brne	.+46     	; 0x4bc <lcd_print+0x74>
	{
		temp = value/1000;
     48e:	c8 01       	movw	r24, r16
     490:	68 ee       	ldi	r22, 0xE8	; 232
     492:	73 e0       	ldi	r23, 0x03	; 3
     494:	0e 94 4e 08 	call	0x109c	; 0x109c <__udivmodhi4>
     498:	cb 01       	movw	r24, r22
     49a:	70 93 3f 02 	sts	0x023F, r23
     49e:	60 93 3e 02 	sts	0x023E, r22
		thousand = temp%10 + 48;
     4a2:	6a e0       	ldi	r22, 0x0A	; 10
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	0e 94 4e 08 	call	0x109c	; 0x109c <__udivmodhi4>
     4aa:	c0 96       	adiw	r24, 0x30	; 48
     4ac:	90 93 4b 02 	sts	0x024B, r25
     4b0:	80 93 4a 02 	sts	0x024A, r24
		lcd_wr_char(thousand);
     4b4:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_wr_char>
		flag=1;
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <lcd_print+0x76>
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     4bc:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     4be:	c3 30       	cpi	r28, 0x03	; 3
     4c0:	d1 05       	cpc	r29, r1
     4c2:	11 f0       	breq	.+4      	; 0x4c8 <lcd_print+0x80>
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	b1 f4       	brne	.+44     	; 0x4f4 <lcd_print+0xac>
	{
		temp = value/100;
     4c8:	c8 01       	movw	r24, r16
     4ca:	64 e6       	ldi	r22, 0x64	; 100
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	0e 94 4e 08 	call	0x109c	; 0x109c <__udivmodhi4>
     4d2:	cb 01       	movw	r24, r22
     4d4:	70 93 3f 02 	sts	0x023F, r23
     4d8:	60 93 3e 02 	sts	0x023E, r22
		hundred = temp%10 + 48;
     4dc:	6a e0       	ldi	r22, 0x0A	; 10
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	0e 94 4e 08 	call	0x109c	; 0x109c <__udivmodhi4>
     4e4:	c0 96       	adiw	r24, 0x30	; 48
     4e6:	90 93 47 02 	sts	0x0247, r25
     4ea:	80 93 46 02 	sts	0x0246, r24
		lcd_wr_char(hundred);
     4ee:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_wr_char>
		flag=1;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     4f4:	c2 30       	cpi	r28, 0x02	; 2
     4f6:	d1 05       	cpc	r29, r1
     4f8:	11 f0       	breq	.+4      	; 0x4fe <lcd_print+0xb6>
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	b1 f4       	brne	.+44     	; 0x52a <lcd_print+0xe2>
	{
		temp = value/10;
     4fe:	2a e0       	ldi	r18, 0x0A	; 10
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	c8 01       	movw	r24, r16
     504:	b9 01       	movw	r22, r18
     506:	0e 94 4e 08 	call	0x109c	; 0x109c <__udivmodhi4>
     50a:	cb 01       	movw	r24, r22
     50c:	70 93 3f 02 	sts	0x023F, r23
     510:	60 93 3e 02 	sts	0x023E, r22
		tens = temp%10 + 48;
     514:	b9 01       	movw	r22, r18
     516:	0e 94 4e 08 	call	0x109c	; 0x109c <__udivmodhi4>
     51a:	c0 96       	adiw	r24, 0x30	; 48
     51c:	90 93 45 02 	sts	0x0245, r25
     520:	80 93 44 02 	sts	0x0244, r24
		lcd_wr_char(tens);
     524:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_wr_char>
		flag=1;
     528:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     52a:	c1 30       	cpi	r28, 0x01	; 1
     52c:	d1 05       	cpc	r29, r1
     52e:	11 f0       	breq	.+4      	; 0x534 <lcd_print+0xec>
     530:	81 30       	cpi	r24, 0x01	; 1
     532:	61 f4       	brne	.+24     	; 0x54c <lcd_print+0x104>
	{
		unit = value%10 + 48;
     534:	c8 01       	movw	r24, r16
     536:	6a e0       	ldi	r22, 0x0A	; 10
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	0e 94 4e 08 	call	0x109c	; 0x109c <__udivmodhi4>
     53e:	c0 96       	adiw	r24, 0x30	; 48
     540:	90 93 49 02 	sts	0x0249, r25
     544:	80 93 48 02 	sts	0x0248, r24
		lcd_wr_char(unit);
     548:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_wr_char>
	}
	if(digits>5)
     54c:	c6 30       	cpi	r28, 0x06	; 6
     54e:	d1 05       	cpc	r29, r1
     550:	1c f0       	brlt	.+6      	; 0x558 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     552:	85 e4       	ldi	r24, 0x45	; 69
     554:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_wr_char>
	}
	
}
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	08 95       	ret

00000562 <lcd_port_config>:
unsigned char Right_white_line = 0;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     562:	87 b1       	in	r24, 0x07	; 7
     564:	87 6f       	ori	r24, 0xF7	; 247
     566:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     568:	88 b1       	in	r24, 0x08	; 8
     56a:	80 78       	andi	r24, 0x80	; 128
     56c:	88 b9       	out	0x08, r24	; 8
}
     56e:	08 95       	ret

00000570 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     570:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     572:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     574:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     578:	10 92 08 01 	sts	0x0108, r1
}
     57c:	08 95       	ret

0000057e <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     57e:	e1 e2       	ldi	r30, 0x21	; 33
     580:	f1 e0       	ldi	r31, 0x01	; 1
     582:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     584:	8f ef       	ldi	r24, 0xFF	; 255
     586:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     590:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     594:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     598:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     59c:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     5a0:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     5a4:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     5a8:	89 ea       	ldi	r24, 0xA9	; 169
     5aa:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     5ae:	8b e0       	ldi	r24, 0x0B	; 11
     5b0:	80 83       	st	Z, r24
}
     5b2:	08 95       	ret

000005b4 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     5b4:	ea e7       	ldi	r30, 0x7A	; 122
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     5ba:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     5be:	80 e2       	ldi	r24, 0x20	; 32
     5c0:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     5c4:	80 e8       	ldi	r24, 0x80	; 128
     5c6:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     5c8:	86 e8       	ldi	r24, 0x86	; 134
     5ca:	80 83       	st	Z, r24
}
     5cc:	08 95       	ret

000005ce <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
     5ce:	88 30       	cpi	r24, 0x08	; 8
     5d0:	18 f0       	brcs	.+6      	; 0x5d8 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     5d2:	98 e0       	ldi	r25, 0x08	; 8
     5d4:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
     5d8:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
     5da:	80 62       	ori	r24, 0x20	; 32
     5dc:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     5e0:	ea e7       	ldi	r30, 0x7A	; 122
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	80 64       	ori	r24, 0x40	; 64
     5e8:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     5ea:	80 81       	ld	r24, Z
     5ec:	84 ff       	sbrs	r24, 4
     5ee:	fd cf       	rjmp	.-6      	; 0x5ea <ADC_Conversion+0x1c>
	a=ADCH;
     5f0:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     5f4:	ea e7       	ldi	r30, 0x7A	; 122
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	90 81       	ld	r25, Z
     5fa:	90 61       	ori	r25, 0x10	; 16
     5fc:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     5fe:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     602:	08 95       	ret

00000604 <sensor>:
	sensor(0,th[0],avg[0]);
	sensor(1,th[1],avg[1]);
	sensor(2,th[2],avg[2]);
}
void sensor(int n,int sn,int avgn)
{
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	7c 01       	movw	r14, r24
     610:	ea 01       	movw	r28, r20
	sn=ADC_Conversion(n+1);
     612:	18 2f       	mov	r17, r24
     614:	8f 5f       	subi	r24, 0xFF	; 255
     616:	0e 94 e7 02 	call	0x5ce	; 0x5ce <ADC_Conversion>
     61a:	90 e0       	ldi	r25, 0x00	; 0
	if(sn>=avgn)
     61c:	8c 17       	cp	r24, r28
     61e:	9d 07       	cpc	r25, r29
     620:	fc f0       	brlt	.+62     	; 0x660 <sensor+0x5c>
	{
		th[n]=1;
     622:	f7 01       	movw	r30, r14
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	e0 5e       	subi	r30, 0xE0	; 224
     62a:	fd 4f       	sbci	r31, 0xFD	; 253
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	91 83       	std	Z+1, r25	; 0x01
     632:	80 83       	st	Z, r24
		highcount++;
     634:	80 91 1a 02 	lds	r24, 0x021A
     638:	90 91 1b 02 	lds	r25, 0x021B
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	90 93 1b 02 	sts	0x021B, r25
     642:	80 93 1a 02 	sts	0x021A, r24
		highcurrent+=(n+1);
     646:	c7 01       	movw	r24, r14
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	20 91 18 02 	lds	r18, 0x0218
     64e:	30 91 19 02 	lds	r19, 0x0219
     652:	82 0f       	add	r24, r18
     654:	93 1f       	adc	r25, r19
     656:	90 93 19 02 	sts	0x0219, r25
     65a:	80 93 18 02 	sts	0x0218, r24
     65e:	07 c0       	rjmp	.+14     	; 0x66e <sensor+0x6a>
	}
	else if(sn<avgn)
	{
		th[n]=0;
     660:	f7 01       	movw	r30, r14
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	e0 5e       	subi	r30, 0xE0	; 224
     668:	fd 4f       	sbci	r31, 0xFD	; 253
     66a:	11 82       	std	Z+1, r1	; 0x01
     66c:	10 82       	st	Z, r1
	}
	lcd_print(1, 3-n, th[n], 1);
     66e:	63 e0       	ldi	r22, 0x03	; 3
     670:	61 1b       	sub	r22, r17
     672:	f7 01       	movw	r30, r14
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	e0 5e       	subi	r30, 0xE0	; 224
     67a:	fd 4f       	sbci	r31, 0xFD	; 253
     67c:	40 81       	ld	r20, Z
     67e:	51 81       	ldd	r21, Z+1	; 0x01
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	21 e0       	ldi	r18, 0x01	; 1
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	0e 94 24 02 	call	0x448	; 0x448 <lcd_print>
}
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	08 95       	ret

00000696 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	d8 2f       	mov	r29, r24
     69c:	c6 2f       	mov	r28, r22
     69e:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
     6a0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <ADC_Conversion>
     6a4:	48 2f       	mov	r20, r24
     6a6:	80 93 40 02 	sts	0x0240, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     6aa:	8d 2f       	mov	r24, r29
     6ac:	6c 2f       	mov	r22, r28
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	23 e0       	ldi	r18, 0x03	; 3
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	0e 94 24 02 	call	0x448	; 0x448 <lcd_print>
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     6be:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     6c2:	60 93 2a 01 	sts	0x012A, r22
}
     6c6:	08 95       	ret

000006c8 <left_encoder_pin_config>:
}*/

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     6c8:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     6ca:	74 9a       	sbi	0x0e, 4	; 14
}
     6cc:	08 95       	ret

000006ce <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     6ce:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     6d0:	75 9a       	sbi	0x0e, 5	; 14
}
     6d2:	08 95       	ret

000006d4 <left_position_encoder_interrupt_init>:
 right_encoder_pin_config(); //right encoder pin config	
}*/

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     6d4:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     6d6:	ea e6       	ldi	r30, 0x6A	; 106
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	80 81       	ld	r24, Z
     6dc:	82 60       	ori	r24, 0x02	; 2
     6de:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     6e0:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     6e2:	78 94       	sei
}
     6e4:	08 95       	ret

000006e6 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     6e6:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     6e8:	ea e6       	ldi	r30, 0x6A	; 106
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	88 60       	ori	r24, 0x08	; 8
     6f0:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     6f2:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     6f4:	78 94       	sei
}
     6f6:	08 95       	ret

000006f8 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
     6f8:	1f 92       	push	r1
     6fa:	0f 92       	push	r0
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	af 93       	push	r26
     708:	bf 93       	push	r27
 ShaftCountRight++;  //increment right shaft position count
     70a:	80 91 2e 02 	lds	r24, 0x022E
     70e:	90 91 2f 02 	lds	r25, 0x022F
     712:	a0 91 30 02 	lds	r26, 0x0230
     716:	b0 91 31 02 	lds	r27, 0x0231
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	a1 1d       	adc	r26, r1
     71e:	b1 1d       	adc	r27, r1
     720:	80 93 2e 02 	sts	0x022E, r24
     724:	90 93 2f 02 	sts	0x022F, r25
     728:	a0 93 30 02 	sts	0x0230, r26
     72c:	b0 93 31 02 	sts	0x0231, r27
}
     730:	bf 91       	pop	r27
     732:	af 91       	pop	r26
     734:	9f 91       	pop	r25
     736:	8f 91       	pop	r24
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	1f 90       	pop	r1
     740:	18 95       	reti

00000742 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	8f 93       	push	r24
     74e:	9f 93       	push	r25
     750:	af 93       	push	r26
     752:	bf 93       	push	r27
 ShaftCountLeft++;  //increment left shaft position count
     754:	80 91 32 02 	lds	r24, 0x0232
     758:	90 91 33 02 	lds	r25, 0x0233
     75c:	a0 91 34 02 	lds	r26, 0x0234
     760:	b0 91 35 02 	lds	r27, 0x0235
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	a1 1d       	adc	r26, r1
     768:	b1 1d       	adc	r27, r1
     76a:	80 93 32 02 	sts	0x0232, r24
     76e:	90 93 33 02 	sts	0x0233, r25
     772:	a0 93 34 02 	sts	0x0234, r26
     776:	b0 93 35 02 	sts	0x0235, r27
}
     77a:	bf 91       	pop	r27
     77c:	af 91       	pop	r26
     77e:	9f 91       	pop	r25
     780:	8f 91       	pop	r24
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	0f 90       	pop	r0
     788:	1f 90       	pop	r1
     78a:	18 95       	reti

0000078c <angle_rotate>:
}
*/

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     792:	bc 01       	movw	r22, r24
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 c0 07 	call	0xf80	; 0xf80 <__floatunsisf>
     79c:	28 e4       	ldi	r18, 0x48	; 72
     79e:	31 ee       	ldi	r19, 0xE1	; 225
     7a0:	42 e8       	ldi	r20, 0x82	; 130
     7a2:	50 e4       	ldi	r21, 0x40	; 64
     7a4:	0e 94 27 07 	call	0xe4e	; 0xe4e <__divsf3>
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     7a8:	0e 94 94 07 	call	0xf28	; 0xf28 <__fixunssfsi>
     7ac:	dc 01       	movw	r26, r24
     7ae:	cb 01       	movw	r24, r22
     7b0:	a0 e0       	ldi	r26, 0x00	; 0
     7b2:	b0 e0       	ldi	r27, 0x00	; 0
 ShaftCountRight = 0; 
     7b4:	10 92 2e 02 	sts	0x022E, r1
     7b8:	10 92 2f 02 	sts	0x022F, r1
     7bc:	10 92 30 02 	sts	0x0230, r1
     7c0:	10 92 31 02 	sts	0x0231, r1
 ShaftCountLeft = 0; 
     7c4:	10 92 32 02 	sts	0x0232, r1
     7c8:	10 92 33 02 	sts	0x0233, r1
     7cc:	10 92 34 02 	sts	0x0234, r1
     7d0:	10 92 35 02 	sts	0x0235, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	c0 e0       	ldi	r28, 0x00	; 0
     7d8:	40 91 2e 02 	lds	r20, 0x022E
     7dc:	50 91 2f 02 	lds	r21, 0x022F
     7e0:	60 91 30 02 	lds	r22, 0x0230
     7e4:	70 91 31 02 	lds	r23, 0x0231
     7e8:	00 91 32 02 	lds	r16, 0x0232
     7ec:	10 91 33 02 	lds	r17, 0x0233
     7f0:	20 91 34 02 	lds	r18, 0x0234
     7f4:	30 91 35 02 	lds	r19, 0x0235
     7f8:	ef 2f       	mov	r30, r31
     7fa:	48 17       	cp	r20, r24
     7fc:	59 07       	cpc	r21, r25
     7fe:	6a 07       	cpc	r22, r26
     800:	7b 07       	cpc	r23, r27
     802:	08 f4       	brcc	.+2      	; 0x806 <angle_rotate+0x7a>
     804:	ec 2f       	mov	r30, r28
     806:	ee 23       	and	r30, r30
     808:	49 f4       	brne	.+18     	; 0x81c <angle_rotate+0x90>
     80a:	4f 2f       	mov	r20, r31
     80c:	08 17       	cp	r16, r24
     80e:	19 07       	cpc	r17, r25
     810:	2a 07       	cpc	r18, r26
     812:	3b 07       	cpc	r19, r27
     814:	08 f4       	brcc	.+2      	; 0x818 <angle_rotate+0x8c>
     816:	4c 2f       	mov	r20, r28
     818:	44 23       	and	r20, r20
     81a:	f1 f2       	breq	.-68     	; 0x7d8 <angle_rotate+0x4c>
  break;
 }
 stop(); //Stop robot
     81c:	0e 94 36 04 	call	0x86c	; 0x86c <stop>
}
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	08 95       	ret

00000828 <motion_pin_config>:


//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
     828:	81 b1       	in	r24, 0x01	; 1
     82a:	8f 60       	ori	r24, 0x0F	; 15
     82c:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     82e:	82 b1       	in	r24, 0x02	; 2
     830:	80 7f       	andi	r24, 0xF0	; 240
     832:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     834:	ea e0       	ldi	r30, 0x0A	; 10
     836:	f1 e0       	ldi	r31, 0x01	; 1
     838:	80 81       	ld	r24, Z
     83a:	88 61       	ori	r24, 0x18	; 24
     83c:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     83e:	eb e0       	ldi	r30, 0x0B	; 11
     840:	f1 e0       	ldi	r31, 0x01	; 1
     842:	80 81       	ld	r24, Z
     844:	88 61       	ori	r24, 0x18	; 24
     846:	80 83       	st	Z, r24
}
     848:	08 95       	ret

0000084a <port_init>:

void port_init()
{
	lcd_port_config();
     84a:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_port_config>
	adc_pin_config();
     84e:	0e 94 b8 02 	call	0x570	; 0x570 <adc_pin_config>
	motion_pin_config();
     852:	0e 94 14 04 	call	0x828	; 0x828 <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
     856:	0e 94 64 03 	call	0x6c8	; 0x6c8 <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
     85a:	0e 94 67 03 	call	0x6ce	; 0x6ce <right_encoder_pin_config>
}
     85e:	08 95       	ret

00000860 <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
     860:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     862:	90 7f       	andi	r25, 0xF0	; 240

void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
     864:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     866:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
     868:	92 b9       	out	0x02, r25	; 2
}
     86a:	08 95       	ret

0000086c <stop>:
	motion_set(0x08);
}

void stop (void)
{
	motion_set(0x00);
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     872:	08 95       	ret

00000874 <forward>:
	PORTA = PortARestore; 		// executing the command
}

void forward (void) //both wheels forward
{
	motion_set(0x06);
     874:	86 e0       	ldi	r24, 0x06	; 6
     876:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     87a:	08 95       	ret

0000087c <back>:

void back (void) //both wheels backward
{
	motion_set(0x09);
     87c:	89 e0       	ldi	r24, 0x09	; 9
     87e:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     882:	08 95       	ret

00000884 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
     884:	85 e0       	ldi	r24, 0x05	; 5
     886:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     88a:	08 95       	ret

0000088c <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
     88c:	8a e0       	ldi	r24, 0x0A	; 10
     88e:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     892:	08 95       	ret

00000894 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
	motion_set(0x04);
     894:	84 e0       	ldi	r24, 0x04	; 4
     896:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     89a:	08 95       	ret

0000089c <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
	motion_set(0x02);
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     8a2:	08 95       	ret

000008a4 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
	motion_set(0x01);
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     8aa:	08 95       	ret

000008ac <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
     8ac:	88 e0       	ldi	r24, 0x08	; 8
     8ae:	0e 94 30 04 	call	0x860	; 0x860 <motion_set>
}
     8b2:	08 95       	ret

000008b4 <linear_distance_mm>:
	motion_set(0x00);
}


void linear_distance_mm(unsigned int DistanceInMM)
{
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     8c4:	bc 01       	movw	r22, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 c0 07 	call	0xf80	; 0xf80 <__floatunsisf>
     8ce:	25 ee       	ldi	r18, 0xE5	; 229
     8d0:	30 ed       	ldi	r19, 0xD0	; 208
     8d2:	4a ea       	ldi	r20, 0xAA	; 170
     8d4:	50 e4       	ldi	r21, 0x40	; 64
     8d6:	0e 94 27 07 	call	0xe4e	; 0xe4e <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     8da:	0e 94 94 07 	call	0xf28	; 0xf28 <__fixunssfsi>
     8de:	c6 2e       	mov	r12, r22
     8e0:	d7 2e       	mov	r13, r23
     8e2:	e8 2e       	mov	r14, r24
     8e4:	f9 2e       	mov	r15, r25
	
	ShaftCountRight = 0;
     8e6:	10 92 2e 02 	sts	0x022E, r1
     8ea:	10 92 2f 02 	sts	0x022F, r1
     8ee:	10 92 30 02 	sts	0x0230, r1
     8f2:	10 92 31 02 	sts	0x0231, r1
	while(1)
	{
		readSensor();
		proportional();
		forward();
		velocity(baseLine-p,baseLine+p);
     8f6:	cb e0       	ldi	r28, 0x0B	; 11
     8f8:	d2 e0       	ldi	r29, 0x02	; 2
     8fa:	0c e1       	ldi	r16, 0x1C	; 28
     8fc:	12 e0       	ldi	r17, 0x02	; 2
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
	
	ShaftCountRight = 0;
	while(1)
	{
		readSensor();
     8fe:	0e 94 95 00 	call	0x12a	; 0x12a <readSensor>
		proportional();
     902:	0e 94 c8 00 	call	0x190	; 0x190 <proportional>
		forward();
     906:	0e 94 3a 04 	call	0x874	; 0x874 <forward>
		velocity(baseLine-p,baseLine+p);
     90a:	88 81       	ld	r24, Y
     90c:	f8 01       	movw	r30, r16
     90e:	90 81       	ld	r25, Z
     910:	69 2f       	mov	r22, r25
     912:	68 0f       	add	r22, r24
     914:	89 1b       	sub	r24, r25
     916:	0e 94 5f 03 	call	0x6be	; 0x6be <velocity>
		if(ShaftCountRight > ReqdShaftCountInt)
     91a:	80 91 2e 02 	lds	r24, 0x022E
     91e:	90 91 2f 02 	lds	r25, 0x022F
     922:	a0 91 30 02 	lds	r26, 0x0230
     926:	b0 91 31 02 	lds	r27, 0x0231
     92a:	c8 16       	cp	r12, r24
     92c:	d9 06       	cpc	r13, r25
     92e:	ea 06       	cpc	r14, r26
     930:	fb 06       	cpc	r15, r27
     932:	28 f7       	brcc	.-54     	; 0x8fe <linear_distance_mm+0x4a>
		{
			break;
		}
	}
	stop(); //Stop robot
     934:	0e 94 36 04 	call	0x86c	; 0x86c <stop>
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	08 95       	ret

0000094a <forward_mm>:
	}
}

void forward_mm(unsigned int DistanceInMM)
{
	linear_distance_mm(DistanceInMM);
     94a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <linear_distance_mm>
}
     94e:	08 95       	ret

00000950 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	ec 01       	movw	r28, r24
	back();
     956:	0e 94 3e 04 	call	0x87c	; 0x87c <back>
	linear_distance_mm(DistanceInMM);
     95a:	ce 01       	movw	r24, r28
     95c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <linear_distance_mm>
}
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <left_degrees>:

void left_degrees(unsigned int Degrees)
{
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
     96c:	0e 94 42 04 	call	0x884	; 0x884 <left>
	angle_rotate(Degrees);
     970:	ce 01       	movw	r24, r28
     972:	0e 94 c6 03 	call	0x78c	; 0x78c <angle_rotate>
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <right_degrees>:



void right_degrees(unsigned int Degrees)
{
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
     982:	0e 94 46 04 	call	0x88c	; 0x88c <right>
	angle_rotate(Degrees);
     986:	ce 01       	movw	r24, r28
     988:	0e 94 c6 03 	call	0x78c	; 0x78c <angle_rotate>
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <soft_left_degrees>:


void soft_left_degrees(unsigned int Degrees)
{
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
     998:	0e 94 4a 04 	call	0x894	; 0x894 <soft_left>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     99c:	ce 01       	movw	r24, r28
     99e:	88 0f       	add	r24, r24
     9a0:	99 1f       	adc	r25, r25
     9a2:	0e 94 c6 03 	call	0x78c	; 0x78c <angle_rotate>
}
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
     9b2:	0e 94 4e 04 	call	0x89c	; 0x89c <soft_right>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     9b6:	ce 01       	movw	r24, r28
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	0e 94 c6 03 	call	0x78c	; 0x78c <angle_rotate>
}
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
     9cc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <soft_left_2>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     9d0:	ce 01       	movw	r24, r28
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	0e 94 c6 03 	call	0x78c	; 0x78c <angle_rotate>
}
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
     9e6:	0e 94 56 04 	call	0x8ac	; 0x8ac <soft_right_2>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     9ea:	ce 01       	movw	r24, r28
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	0e 94 c6 03 	call	0x78c	; 0x78c <angle_rotate>
}
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <manoeuvre>:
	int y_origin = 'D';
	
	
	
	
	int x_middle = x_F - x_origin;
     9fa:	9c 01       	movw	r18, r24
     9fc:	24 50       	subi	r18, 0x04	; 4
     9fe:	30 40       	sbci	r19, 0x00	; 0
	int y_middle = y_F - y_origin;
     a00:	64 54       	subi	r22, 0x44	; 68
     a02:	70 40       	sbci	r23, 0x00	; 0
	
	//For determining the final destination x-coordinate
	if( (x_middle) > 0 ){ x_D = 7; }
     a04:	12 16       	cp	r1, r18
     a06:	13 06       	cpc	r1, r19
     a08:	3c f4       	brge	.+14     	; 0xa18 <manoeuvre+0x1e>
     a0a:	87 e0       	ldi	r24, 0x07	; 7
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	90 93 29 02 	sts	0x0229, r25
     a12:	80 93 28 02 	sts	0x0228, r24
     a16:	06 c0       	rjmp	.+12     	; 0xa24 <manoeuvre+0x2a>
	else { x_D = 1; }
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	90 93 29 02 	sts	0x0229, r25
     a20:	80 93 28 02 	sts	0x0228, r24
	int x_intermediate = x_D - x_origin;
     a24:	80 91 28 02 	lds	r24, 0x0228
     a28:	90 91 29 02 	lds	r25, 0x0229
     a2c:	fc 01       	movw	r30, r24
     a2e:	34 97       	sbiw	r30, 0x04	; 4
	
	//For determining the final destination y-coordinate	
	if((y_middle) > 0){ y_D = 'F'; }	
     a30:	16 16       	cp	r1, r22
     a32:	17 06       	cpc	r1, r23
     a34:	3c f4       	brge	.+14     	; 0xa44 <manoeuvre+0x4a>
     a36:	86 e4       	ldi	r24, 0x46	; 70
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	90 93 27 02 	sts	0x0227, r25
     a3e:	80 93 26 02 	sts	0x0226, r24
     a42:	10 c0       	rjmp	.+32     	; 0xa64 <manoeuvre+0x6a>
	else if((y_middle) == 0){ y_D = 'D'; }
     a44:	61 15       	cp	r22, r1
     a46:	71 05       	cpc	r23, r1
     a48:	39 f4       	brne	.+14     	; 0xa58 <manoeuvre+0x5e>
     a4a:	84 e4       	ldi	r24, 0x44	; 68
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	90 93 27 02 	sts	0x0227, r25
     a52:	80 93 26 02 	sts	0x0226, r24
     a56:	06 c0       	rjmp	.+12     	; 0xa64 <manoeuvre+0x6a>
	else { y_D = 'B'; } 
     a58:	82 e4       	ldi	r24, 0x42	; 66
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	90 93 27 02 	sts	0x0227, r25
     a60:	80 93 26 02 	sts	0x0226, r24
	int y_intermediate = y_D - y_origin;	
     a64:	80 91 26 02 	lds	r24, 0x0226
     a68:	90 91 27 02 	lds	r25, 0x0227
     a6c:	84 54       	subi	r24, 0x44	; 68
     a6e:	90 40       	sbci	r25, 0x00	; 0
	
	//How much to manoeuvre
	vertical = 	x_middle - x_intermediate;
     a70:	2e 1b       	sub	r18, r30
     a72:	3f 0b       	sbc	r19, r31
     a74:	30 93 2d 02 	sts	0x022D, r19
     a78:	20 93 2c 02 	sts	0x022C, r18
	horizontal = y_middle - y_intermediate;
     a7c:	68 1b       	sub	r22, r24
     a7e:	79 0b       	sbc	r23, r25
     a80:	70 93 2b 02 	sts	0x022B, r23
     a84:	60 93 2a 02 	sts	0x022A, r22
	direction = dir_F;	
     a88:	40 93 41 02 	sts	0x0241, r20
}
     a8c:	08 95       	ret

00000a8e <print_value>:

void print_value(){
	lcd_set_4bit();
     a8e:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_set_4bit>
	lcd_cursor(1, 3);
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	63 e0       	ldi	r22, 0x03	; 3
     a96:	0e 94 04 02 	call	0x408	; 0x408 <lcd_cursor>
	lcd_string("Vert");	
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <lcd_string>
	lcd_print(1,8, vertical, 3);
     aa2:	40 91 2c 02 	lds	r20, 0x022C
     aa6:	50 91 2d 02 	lds	r21, 0x022D
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	68 e0       	ldi	r22, 0x08	; 8
     aae:	23 e0       	ldi	r18, 0x03	; 3
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	0e 94 24 02 	call	0x448	; 0x448 <lcd_print>
	lcd_cursor(2, 1);
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	0e 94 04 02 	call	0x408	; 0x408 <lcd_cursor>
	lcd_string("horiz");
     abe:	85 e0       	ldi	r24, 0x05	; 5
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <lcd_string>
	lcd_print(2,8, horizontal, 3);
     ac6:	40 91 2a 02 	lds	r20, 0x022A
     aca:	50 91 2b 02 	lds	r21, 0x022B
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	68 e0       	ldi	r22, 0x08	; 8
     ad2:	23 e0       	ldi	r18, 0x03	; 3
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	0e 94 24 02 	call	0x448	; 0x448 <lcd_print>
}
     ada:	08 95       	ret

00000adc <rotate>:

void rotate(char face){
	switch(direction){
     adc:	90 91 41 02 	lds	r25, 0x0241
     ae0:	9e 34       	cpi	r25, 0x4E	; 78
     ae2:	61 f0       	breq	.+24     	; 0xafc <rotate+0x20>
     ae4:	9f 34       	cpi	r25, 0x4F	; 79
     ae6:	20 f4       	brcc	.+8      	; 0xaf0 <rotate+0x14>
     ae8:	95 34       	cpi	r25, 0x45	; 69
     aea:	09 f0       	breq	.+2      	; 0xaee <rotate+0x12>
     aec:	5b c0       	rjmp	.+182    	; 0xba4 <rotate+0xc8>
     aee:	46 c0       	rjmp	.+140    	; 0xb7c <rotate+0xa0>
     af0:	93 35       	cpi	r25, 0x53	; 83
     af2:	79 f1       	breq	.+94     	; 0xb52 <rotate+0x76>
     af4:	97 35       	cpi	r25, 0x57	; 87
     af6:	09 f0       	breq	.+2      	; 0xafa <rotate+0x1e>
     af8:	55 c0       	rjmp	.+170    	; 0xba4 <rotate+0xc8>
     afa:	16 c0       	rjmp	.+44     	; 0xb28 <rotate+0x4c>
		case 'N':{
			if(face == 'S'){right_degrees(180);}
     afc:	83 35       	cpi	r24, 0x53	; 83
     afe:	29 f4       	brne	.+10     	; 0xb0a <rotate+0x2e>
     b00:	84 eb       	ldi	r24, 0xB4	; 180
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 be 04 	call	0x97c	; 0x97c <right_degrees>
     b08:	08 95       	ret
			else if(face == 'E'){right_degrees(90);}
     b0a:	85 34       	cpi	r24, 0x45	; 69
     b0c:	29 f4       	brne	.+10     	; 0xb18 <rotate+0x3c>
     b0e:	8a e5       	ldi	r24, 0x5A	; 90
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 be 04 	call	0x97c	; 0x97c <right_degrees>
     b16:	08 95       	ret
			else if(face == 'W'){left_degrees(90);}
     b18:	87 35       	cpi	r24, 0x57	; 87
     b1a:	09 f0       	breq	.+2      	; 0xb1e <rotate+0x42>
     b1c:	43 c0       	rjmp	.+134    	; 0xba4 <rotate+0xc8>
     b1e:	8a e5       	ldi	r24, 0x5A	; 90
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 b3 04 	call	0x966	; 0x966 <left_degrees>
     b26:	08 95       	ret
				break;
		}
		case 'W':{
			if(face == 'S'){left_degrees(90);}
     b28:	83 35       	cpi	r24, 0x53	; 83
     b2a:	29 f4       	brne	.+10     	; 0xb36 <rotate+0x5a>
     b2c:	8a e5       	ldi	r24, 0x5A	; 90
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 b3 04 	call	0x966	; 0x966 <left_degrees>
     b34:	08 95       	ret
			else if(face == 'E'){right_degrees(180);}
     b36:	85 34       	cpi	r24, 0x45	; 69
     b38:	29 f4       	brne	.+10     	; 0xb44 <rotate+0x68>
     b3a:	84 eb       	ldi	r24, 0xB4	; 180
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 be 04 	call	0x97c	; 0x97c <right_degrees>
     b42:	08 95       	ret
			else if(face == 'N'){right_degrees(90);}
     b44:	8e 34       	cpi	r24, 0x4E	; 78
     b46:	71 f5       	brne	.+92     	; 0xba4 <rotate+0xc8>
     b48:	8a e5       	ldi	r24, 0x5A	; 90
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 be 04 	call	0x97c	; 0x97c <right_degrees>
     b50:	08 95       	ret
				break;
		}
		case 'S':{
			if(face == 'N'){right_degrees(180);}
     b52:	8e 34       	cpi	r24, 0x4E	; 78
     b54:	29 f4       	brne	.+10     	; 0xb60 <rotate+0x84>
     b56:	84 eb       	ldi	r24, 0xB4	; 180
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 be 04 	call	0x97c	; 0x97c <right_degrees>
     b5e:	08 95       	ret
			else if(face == 'W'){right_degrees(90);}
     b60:	87 35       	cpi	r24, 0x57	; 87
     b62:	29 f4       	brne	.+10     	; 0xb6e <rotate+0x92>
     b64:	8a e5       	ldi	r24, 0x5A	; 90
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 be 04 	call	0x97c	; 0x97c <right_degrees>
     b6c:	08 95       	ret
			else if(face == 'E'){left_degrees(90);}
     b6e:	85 34       	cpi	r24, 0x45	; 69
     b70:	c9 f4       	brne	.+50     	; 0xba4 <rotate+0xc8>
     b72:	8a e5       	ldi	r24, 0x5A	; 90
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 b3 04 	call	0x966	; 0x966 <left_degrees>
     b7a:	08 95       	ret
				break;
		}
		case 'E':{
			if(face == 'W'){right_degrees(180);}
     b7c:	87 35       	cpi	r24, 0x57	; 87
     b7e:	29 f4       	brne	.+10     	; 0xb8a <rotate+0xae>
     b80:	84 eb       	ldi	r24, 0xB4	; 180
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 be 04 	call	0x97c	; 0x97c <right_degrees>
     b88:	08 95       	ret
			else if(face == 'S'){right_degrees(90);}
     b8a:	83 35       	cpi	r24, 0x53	; 83
     b8c:	29 f4       	brne	.+10     	; 0xb98 <rotate+0xbc>
     b8e:	8a e5       	ldi	r24, 0x5A	; 90
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 be 04 	call	0x97c	; 0x97c <right_degrees>
     b96:	08 95       	ret
			else if(face == 'N'){left_degrees(90);}
     b98:	8e 34       	cpi	r24, 0x4E	; 78
     b9a:	21 f4       	brne	.+8      	; 0xba4 <rotate+0xc8>
     b9c:	8a e5       	ldi	r24, 0x5A	; 90
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 b3 04 	call	0x966	; 0x966 <left_degrees>
     ba4:	08 95       	ret

00000ba6 <vertical_motion>:
	}
}

void vertical_motion(){
	
	if(vertical < 0){ 
     ba6:	80 91 2c 02 	lds	r24, 0x022C
     baa:	90 91 2d 02 	lds	r25, 0x022D
     bae:	99 23       	and	r25, r25
     bb0:	24 f4       	brge	.+8      	; 0xbba <vertical_motion+0x14>
		face = 'S';
     bb2:	83 e5       	ldi	r24, 0x53	; 83
     bb4:	80 93 39 02 	sts	0x0239, r24
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <vertical_motion+0x1a>
	}
	else{
		face = 'N';
     bba:	8e e4       	ldi	r24, 0x4E	; 78
     bbc:	80 93 39 02 	sts	0x0239, r24
	}
	rotate(face);
     bc0:	80 91 39 02 	lds	r24, 0x0239
     bc4:	0e 94 6e 05 	call	0xadc	; 0xadc <rotate>
	vertical = abs(vertical);
     bc8:	20 91 2c 02 	lds	r18, 0x022C
     bcc:	30 91 2d 02 	lds	r19, 0x022D
     bd0:	33 23       	and	r19, r19
     bd2:	1c f4       	brge	.+6      	; 0xbda <vertical_motion+0x34>
     bd4:	30 95       	com	r19
     bd6:	21 95       	neg	r18
     bd8:	3f 4f       	sbci	r19, 0xFF	; 255
     bda:	30 93 2d 02 	sts	0x022D, r19
     bde:	20 93 2c 02 	sts	0x022C, r18
	forward_mm(vertical * 340);
     be2:	84 e5       	ldi	r24, 0x54	; 84
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	ac 01       	movw	r20, r24
     be8:	24 9f       	mul	r18, r20
     bea:	c0 01       	movw	r24, r0
     bec:	25 9f       	mul	r18, r21
     bee:	90 0d       	add	r25, r0
     bf0:	34 9f       	mul	r19, r20
     bf2:	90 0d       	add	r25, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	0e 94 a5 04 	call	0x94a	; 0x94a <forward_mm>
}
     bfa:	08 95       	ret

00000bfc <horizontal_motion>:
void horizontal_motion(){
	
	if(horizontal < 0){ 
     bfc:	80 91 2a 02 	lds	r24, 0x022A
     c00:	90 91 2b 02 	lds	r25, 0x022B
     c04:	99 23       	and	r25, r25
     c06:	24 f4       	brge	.+8      	; 0xc10 <horizontal_motion+0x14>
		face = 'E';
     c08:	85 e4       	ldi	r24, 0x45	; 69
     c0a:	80 93 39 02 	sts	0x0239, r24
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <horizontal_motion+0x1a>
	}
	else{
		face = 'W';
     c10:	87 e5       	ldi	r24, 0x57	; 87
     c12:	80 93 39 02 	sts	0x0239, r24
	}
	rotate(face);
     c16:	80 91 39 02 	lds	r24, 0x0239
     c1a:	0e 94 6e 05 	call	0xadc	; 0xadc <rotate>
	horizontal = abs(horizontal);
     c1e:	20 91 2a 02 	lds	r18, 0x022A
     c22:	30 91 2b 02 	lds	r19, 0x022B
     c26:	33 23       	and	r19, r19
     c28:	1c f4       	brge	.+6      	; 0xc30 <horizontal_motion+0x34>
     c2a:	30 95       	com	r19
     c2c:	21 95       	neg	r18
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	30 93 2b 02 	sts	0x022B, r19
     c34:	20 93 2a 02 	sts	0x022A, r18
	forward_mm(horizontal * 340);
     c38:	84 e5       	ldi	r24, 0x54	; 84
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	ac 01       	movw	r20, r24
     c3e:	24 9f       	mul	r18, r20
     c40:	c0 01       	movw	r24, r0
     c42:	25 9f       	mul	r18, r21
     c44:	90 0d       	add	r25, r0
     c46:	34 9f       	mul	r19, r20
     c48:	90 0d       	add	r25, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	0e 94 a5 04 	call	0x94a	; 0x94a <forward_mm>
}
     c50:	08 95       	ret

00000c52 <navigate>:


void navigate(int nodes){
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	c2 e0       	ldi	r28, 0x02	; 2
     c60:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<2;i++){	
		if(x_D == 1){
			face = 'S';
		}
		else if(x_D == 7){
			face = 'N';
     c62:	0f 2e       	mov	r0, r31
     c64:	fe e4       	ldi	r31, 0x4E	; 78
     c66:	ef 2e       	mov	r14, r31
     c68:	f0 2d       	mov	r31, r0


void navigate(int nodes){
	for(int i=0;i<2;i++){	
		if(x_D == 1){
			face = 'S';
     c6a:	0f 2e       	mov	r0, r31
     c6c:	f3 e5       	ldi	r31, 0x53	; 83
     c6e:	ff 2e       	mov	r15, r31
     c70:	f0 2d       	mov	r31, r0
		}
		else if(x_D == 7){
			face = 'N';
		}
		rotate(face);
		forward_mm(nodes-1 * 340);
     c72:	8c 01       	movw	r16, r24
     c74:	04 55       	subi	r16, 0x54	; 84
     c76:	11 40       	sbci	r17, 0x01	; 1
}


void navigate(int nodes){
	for(int i=0;i<2;i++){	
		if(x_D == 1){
     c78:	80 91 28 02 	lds	r24, 0x0228
     c7c:	90 91 29 02 	lds	r25, 0x0229
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	91 05       	cpc	r25, r1
     c84:	19 f4       	brne	.+6      	; 0xc8c <navigate+0x3a>
			face = 'S';
     c86:	f0 92 39 02 	sts	0x0239, r15
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <navigate+0x44>
		}
		else if(x_D == 7){
     c8c:	87 30       	cpi	r24, 0x07	; 7
     c8e:	91 05       	cpc	r25, r1
     c90:	11 f4       	brne	.+4      	; 0xc96 <navigate+0x44>
			face = 'N';
     c92:	e0 92 39 02 	sts	0x0239, r14
		}
		rotate(face);
     c96:	80 91 39 02 	lds	r24, 0x0239
     c9a:	0e 94 6e 05 	call	0xadc	; 0xadc <rotate>
		forward_mm(nodes-1 * 340);
     c9e:	c8 01       	movw	r24, r16
     ca0:	0e 94 a5 04 	call	0x94a	; 0x94a <forward_mm>
		right_degrees(180);
     ca4:	84 eb       	ldi	r24, 0xB4	; 180
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 be 04 	call	0x97c	; 0x97c <right_degrees>
     cac:	21 97       	sbiw	r28, 0x01	; 1
	forward_mm(horizontal * 340);
}


void navigate(int nodes){
	for(int i=0;i<2;i++){	
     cae:	21 f7       	brne	.-56     	; 0xc78 <navigate+0x26>
		}
		rotate(face);
		forward_mm(nodes-1 * 340);
		right_degrees(180);
	}
	buzzer_on();
     cb0:	0e 94 30 01 	call	0x260	; 0x260 <buzzer_on>
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	9f ef       	ldi	r25, 0xFF	; 255
     cb8:	ac e2       	ldi	r26, 0x2C	; 44
     cba:	81 50       	subi	r24, 0x01	; 1
     cbc:	90 40       	sbci	r25, 0x00	; 0
     cbe:	a0 40       	sbci	r26, 0x00	; 0
     cc0:	e1 f7       	brne	.-8      	; 0xcba <navigate+0x68>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <navigate+0x72>
     cc4:	00 00       	nop
	_delay_ms(1000);
	buzzer_off();
     cc6:	0e 94 34 01 	call	0x268	; 0x268 <buzzer_off>
			
}
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	ff 90       	pop	r15
     cd4:	ef 90       	pop	r14
     cd6:	08 95       	ret

00000cd8 <init_devices>:

void init_devices (void)
{
	cli(); //Clears the global interrupts
     cd8:	f8 94       	cli
	port_init();
     cda:	0e 94 25 04 	call	0x84a	; 0x84a <port_init>
	adc_init();
     cde:	0e 94 da 02 	call	0x5b4	; 0x5b4 <adc_init>
	timer5_init();
     ce2:	0e 94 bf 02 	call	0x57e	; 0x57e <timer5_init>
	left_position_encoder_interrupt_init();
     ce6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
     cea:	0e 94 73 03 	call	0x6e6	; 0x6e6 <right_position_encoder_interrupt_init>
	sei();   //Enables the global interrupts
     cee:	78 94       	sei
}
     cf0:	08 95       	ret

00000cf2 <main>:


int main(void)
{
	//lcd_port_config();
	init_devices();
     cf2:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <init_devices>
	lcd_set_4bit();	
     cf6:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_set_4bit>
	lcd_init();	
     cfa:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_init>
		char dir_F = 'E';
	
	
		
	
		buzzer_on();
     cfe:	0e 94 30 01 	call	0x260	; 0x260 <buzzer_on>
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	9f ef       	ldi	r25, 0xFF	; 255
     d06:	ac e2       	ldi	r26, 0x2C	; 44
     d08:	81 50       	subi	r24, 0x01	; 1
     d0a:	90 40       	sbci	r25, 0x00	; 0
     d0c:	a0 40       	sbci	r26, 0x00	; 0
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <main+0x16>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <main+0x20>
     d12:	00 00       	nop
		_delay_ms(1000);		//delay
		buzzer_off();
     d14:	0e 94 34 01 	call	0x268	; 0x268 <buzzer_off>
		//This function will set the nodes to travel in the vertical & horizontal direction for the bot to reach its standard spot
		manoeuvre(x_F, y_F, dir_F);	
     d18:	86 e0       	ldi	r24, 0x06	; 6
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	67 e4       	ldi	r22, 0x47	; 71
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	45 e4       	ldi	r20, 0x45	; 69
     d22:	0e 94 fd 04 	call	0x9fa	; 0x9fa <manoeuvre>
		
		print_value();
     d26:	0e 94 47 05 	call	0xa8e	; 0xa8e <print_value>
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	9f ef       	ldi	r25, 0xFF	; 255
     d2e:	a0 ee       	ldi	r26, 0xE0	; 224
     d30:	81 50       	subi	r24, 0x01	; 1
     d32:	90 40       	sbci	r25, 0x00	; 0
     d34:	a0 40       	sbci	r26, 0x00	; 0
     d36:	e1 f7       	brne	.-8      	; 0xd30 <main+0x3e>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <main+0x48>
     d3a:	00 00       	nop
		_delay_ms(5000);
		
		
		lcd_wr_command(0x01);
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	0e 94 92 01 	call	0x324	; 0x324 <lcd_wr_command>
		//_delay_ms(1000);
		
				
		vertical_motion();
     d42:	0e 94 d3 05 	call	0xba6	; 0xba6 <vertical_motion>
		stop();
     d46:	0e 94 36 04 	call	0x86c	; 0x86c <stop>
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	9f e7       	ldi	r25, 0x7F	; 127
     d4e:	a6 e1       	ldi	r26, 0x16	; 22
     d50:	81 50       	subi	r24, 0x01	; 1
     d52:	90 40       	sbci	r25, 0x00	; 0
     d54:	a0 40       	sbci	r26, 0x00	; 0
     d56:	e1 f7       	brne	.-8      	; 0xd50 <main+0x5e>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <main+0x68>
     d5a:	00 00       	nop
		_delay_ms(500);
		horizontal_motion();
     d5c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <horizontal_motion>
     d60:	8f ef       	ldi	r24, 0xFF	; 255
     d62:	9f e7       	ldi	r25, 0x7F	; 127
     d64:	a6 e1       	ldi	r26, 0x16	; 22
     d66:	81 50       	subi	r24, 0x01	; 1
     d68:	90 40       	sbci	r25, 0x00	; 0
     d6a:	a0 40       	sbci	r26, 0x00	; 0
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <main+0x74>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <main+0x7e>
     d70:	00 00       	nop
		_delay_ms(500);
		//right_degrees(180);
		//_delay_ms(500);
		
		
		navigate(STOPS);	
     d72:	87 e0       	ldi	r24, 0x07	; 7
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 29 06 	call	0xc52	; 0xc52 <navigate>
		stop();
     d7a:	0e 94 36 04 	call	0x86c	; 0x86c <stop>
		
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	08 95       	ret

00000d84 <__subsf3>:
     d84:	50 58       	subi	r21, 0x80	; 128

00000d86 <__addsf3>:
     d86:	bb 27       	eor	r27, r27
     d88:	aa 27       	eor	r26, r26
     d8a:	0e d0       	rcall	.+28     	; 0xda8 <__addsf3x>
     d8c:	4d c1       	rjmp	.+666    	; 0x1028 <__fp_round>
     d8e:	3e d1       	rcall	.+636    	; 0x100c <__fp_pscA>
     d90:	30 f0       	brcs	.+12     	; 0xd9e <__addsf3+0x18>
     d92:	43 d1       	rcall	.+646    	; 0x101a <__fp_pscB>
     d94:	20 f0       	brcs	.+8      	; 0xd9e <__addsf3+0x18>
     d96:	31 f4       	brne	.+12     	; 0xda4 <__addsf3+0x1e>
     d98:	9f 3f       	cpi	r25, 0xFF	; 255
     d9a:	11 f4       	brne	.+4      	; 0xda0 <__addsf3+0x1a>
     d9c:	1e f4       	brtc	.+6      	; 0xda4 <__addsf3+0x1e>
     d9e:	33 c1       	rjmp	.+614    	; 0x1006 <__fp_nan>
     da0:	0e f4       	brtc	.+2      	; 0xda4 <__addsf3+0x1e>
     da2:	e0 95       	com	r30
     da4:	e7 fb       	bst	r30, 7
     da6:	29 c1       	rjmp	.+594    	; 0xffa <__fp_inf>

00000da8 <__addsf3x>:
     da8:	e9 2f       	mov	r30, r25
     daa:	4f d1       	rcall	.+670    	; 0x104a <__fp_split3>
     dac:	80 f3       	brcs	.-32     	; 0xd8e <__addsf3+0x8>
     dae:	ba 17       	cp	r27, r26
     db0:	62 07       	cpc	r22, r18
     db2:	73 07       	cpc	r23, r19
     db4:	84 07       	cpc	r24, r20
     db6:	95 07       	cpc	r25, r21
     db8:	18 f0       	brcs	.+6      	; 0xdc0 <__addsf3x+0x18>
     dba:	71 f4       	brne	.+28     	; 0xdd8 <__addsf3x+0x30>
     dbc:	9e f5       	brtc	.+102    	; 0xe24 <__addsf3x+0x7c>
     dbe:	67 c1       	rjmp	.+718    	; 0x108e <__fp_zero>
     dc0:	0e f4       	brtc	.+2      	; 0xdc4 <__addsf3x+0x1c>
     dc2:	e0 95       	com	r30
     dc4:	0b 2e       	mov	r0, r27
     dc6:	ba 2f       	mov	r27, r26
     dc8:	a0 2d       	mov	r26, r0
     dca:	0b 01       	movw	r0, r22
     dcc:	b9 01       	movw	r22, r18
     dce:	90 01       	movw	r18, r0
     dd0:	0c 01       	movw	r0, r24
     dd2:	ca 01       	movw	r24, r20
     dd4:	a0 01       	movw	r20, r0
     dd6:	11 24       	eor	r1, r1
     dd8:	ff 27       	eor	r31, r31
     dda:	59 1b       	sub	r21, r25
     ddc:	99 f0       	breq	.+38     	; 0xe04 <__addsf3x+0x5c>
     dde:	59 3f       	cpi	r21, 0xF9	; 249
     de0:	50 f4       	brcc	.+20     	; 0xdf6 <__addsf3x+0x4e>
     de2:	50 3e       	cpi	r21, 0xE0	; 224
     de4:	68 f1       	brcs	.+90     	; 0xe40 <__addsf3x+0x98>
     de6:	1a 16       	cp	r1, r26
     de8:	f0 40       	sbci	r31, 0x00	; 0
     dea:	a2 2f       	mov	r26, r18
     dec:	23 2f       	mov	r18, r19
     dee:	34 2f       	mov	r19, r20
     df0:	44 27       	eor	r20, r20
     df2:	58 5f       	subi	r21, 0xF8	; 248
     df4:	f3 cf       	rjmp	.-26     	; 0xddc <__addsf3x+0x34>
     df6:	46 95       	lsr	r20
     df8:	37 95       	ror	r19
     dfa:	27 95       	ror	r18
     dfc:	a7 95       	ror	r26
     dfe:	f0 40       	sbci	r31, 0x00	; 0
     e00:	53 95       	inc	r21
     e02:	c9 f7       	brne	.-14     	; 0xdf6 <__addsf3x+0x4e>
     e04:	7e f4       	brtc	.+30     	; 0xe24 <__addsf3x+0x7c>
     e06:	1f 16       	cp	r1, r31
     e08:	ba 0b       	sbc	r27, r26
     e0a:	62 0b       	sbc	r22, r18
     e0c:	73 0b       	sbc	r23, r19
     e0e:	84 0b       	sbc	r24, r20
     e10:	ba f0       	brmi	.+46     	; 0xe40 <__addsf3x+0x98>
     e12:	91 50       	subi	r25, 0x01	; 1
     e14:	a1 f0       	breq	.+40     	; 0xe3e <__addsf3x+0x96>
     e16:	ff 0f       	add	r31, r31
     e18:	bb 1f       	adc	r27, r27
     e1a:	66 1f       	adc	r22, r22
     e1c:	77 1f       	adc	r23, r23
     e1e:	88 1f       	adc	r24, r24
     e20:	c2 f7       	brpl	.-16     	; 0xe12 <__addsf3x+0x6a>
     e22:	0e c0       	rjmp	.+28     	; 0xe40 <__addsf3x+0x98>
     e24:	ba 0f       	add	r27, r26
     e26:	62 1f       	adc	r22, r18
     e28:	73 1f       	adc	r23, r19
     e2a:	84 1f       	adc	r24, r20
     e2c:	48 f4       	brcc	.+18     	; 0xe40 <__addsf3x+0x98>
     e2e:	87 95       	ror	r24
     e30:	77 95       	ror	r23
     e32:	67 95       	ror	r22
     e34:	b7 95       	ror	r27
     e36:	f7 95       	ror	r31
     e38:	9e 3f       	cpi	r25, 0xFE	; 254
     e3a:	08 f0       	brcs	.+2      	; 0xe3e <__addsf3x+0x96>
     e3c:	b3 cf       	rjmp	.-154    	; 0xda4 <__addsf3+0x1e>
     e3e:	93 95       	inc	r25
     e40:	88 0f       	add	r24, r24
     e42:	08 f0       	brcs	.+2      	; 0xe46 <__addsf3x+0x9e>
     e44:	99 27       	eor	r25, r25
     e46:	ee 0f       	add	r30, r30
     e48:	97 95       	ror	r25
     e4a:	87 95       	ror	r24
     e4c:	08 95       	ret

00000e4e <__divsf3>:
     e4e:	0c d0       	rcall	.+24     	; 0xe68 <__divsf3x>
     e50:	eb c0       	rjmp	.+470    	; 0x1028 <__fp_round>
     e52:	e3 d0       	rcall	.+454    	; 0x101a <__fp_pscB>
     e54:	40 f0       	brcs	.+16     	; 0xe66 <__divsf3+0x18>
     e56:	da d0       	rcall	.+436    	; 0x100c <__fp_pscA>
     e58:	30 f0       	brcs	.+12     	; 0xe66 <__divsf3+0x18>
     e5a:	21 f4       	brne	.+8      	; 0xe64 <__divsf3+0x16>
     e5c:	5f 3f       	cpi	r21, 0xFF	; 255
     e5e:	19 f0       	breq	.+6      	; 0xe66 <__divsf3+0x18>
     e60:	cc c0       	rjmp	.+408    	; 0xffa <__fp_inf>
     e62:	51 11       	cpse	r21, r1
     e64:	15 c1       	rjmp	.+554    	; 0x1090 <__fp_szero>
     e66:	cf c0       	rjmp	.+414    	; 0x1006 <__fp_nan>

00000e68 <__divsf3x>:
     e68:	f0 d0       	rcall	.+480    	; 0x104a <__fp_split3>
     e6a:	98 f3       	brcs	.-26     	; 0xe52 <__divsf3+0x4>

00000e6c <__divsf3_pse>:
     e6c:	99 23       	and	r25, r25
     e6e:	c9 f3       	breq	.-14     	; 0xe62 <__divsf3+0x14>
     e70:	55 23       	and	r21, r21
     e72:	b1 f3       	breq	.-20     	; 0xe60 <__divsf3+0x12>
     e74:	95 1b       	sub	r25, r21
     e76:	55 0b       	sbc	r21, r21
     e78:	bb 27       	eor	r27, r27
     e7a:	aa 27       	eor	r26, r26
     e7c:	62 17       	cp	r22, r18
     e7e:	73 07       	cpc	r23, r19
     e80:	84 07       	cpc	r24, r20
     e82:	38 f0       	brcs	.+14     	; 0xe92 <__divsf3_pse+0x26>
     e84:	9f 5f       	subi	r25, 0xFF	; 255
     e86:	5f 4f       	sbci	r21, 0xFF	; 255
     e88:	22 0f       	add	r18, r18
     e8a:	33 1f       	adc	r19, r19
     e8c:	44 1f       	adc	r20, r20
     e8e:	aa 1f       	adc	r26, r26
     e90:	a9 f3       	breq	.-22     	; 0xe7c <__divsf3_pse+0x10>
     e92:	33 d0       	rcall	.+102    	; 0xefa <__divsf3_pse+0x8e>
     e94:	0e 2e       	mov	r0, r30
     e96:	3a f0       	brmi	.+14     	; 0xea6 <__divsf3_pse+0x3a>
     e98:	e0 e8       	ldi	r30, 0x80	; 128
     e9a:	30 d0       	rcall	.+96     	; 0xefc <__divsf3_pse+0x90>
     e9c:	91 50       	subi	r25, 0x01	; 1
     e9e:	50 40       	sbci	r21, 0x00	; 0
     ea0:	e6 95       	lsr	r30
     ea2:	00 1c       	adc	r0, r0
     ea4:	ca f7       	brpl	.-14     	; 0xe98 <__divsf3_pse+0x2c>
     ea6:	29 d0       	rcall	.+82     	; 0xefa <__divsf3_pse+0x8e>
     ea8:	fe 2f       	mov	r31, r30
     eaa:	27 d0       	rcall	.+78     	; 0xefa <__divsf3_pse+0x8e>
     eac:	66 0f       	add	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	88 1f       	adc	r24, r24
     eb2:	bb 1f       	adc	r27, r27
     eb4:	26 17       	cp	r18, r22
     eb6:	37 07       	cpc	r19, r23
     eb8:	48 07       	cpc	r20, r24
     eba:	ab 07       	cpc	r26, r27
     ebc:	b0 e8       	ldi	r27, 0x80	; 128
     ebe:	09 f0       	breq	.+2      	; 0xec2 <__divsf3_pse+0x56>
     ec0:	bb 0b       	sbc	r27, r27
     ec2:	80 2d       	mov	r24, r0
     ec4:	bf 01       	movw	r22, r30
     ec6:	ff 27       	eor	r31, r31
     ec8:	93 58       	subi	r25, 0x83	; 131
     eca:	5f 4f       	sbci	r21, 0xFF	; 255
     ecc:	2a f0       	brmi	.+10     	; 0xed8 <__divsf3_pse+0x6c>
     ece:	9e 3f       	cpi	r25, 0xFE	; 254
     ed0:	51 05       	cpc	r21, r1
     ed2:	68 f0       	brcs	.+26     	; 0xeee <__divsf3_pse+0x82>
     ed4:	92 c0       	rjmp	.+292    	; 0xffa <__fp_inf>
     ed6:	dc c0       	rjmp	.+440    	; 0x1090 <__fp_szero>
     ed8:	5f 3f       	cpi	r21, 0xFF	; 255
     eda:	ec f3       	brlt	.-6      	; 0xed6 <__divsf3_pse+0x6a>
     edc:	98 3e       	cpi	r25, 0xE8	; 232
     ede:	dc f3       	brlt	.-10     	; 0xed6 <__divsf3_pse+0x6a>
     ee0:	86 95       	lsr	r24
     ee2:	77 95       	ror	r23
     ee4:	67 95       	ror	r22
     ee6:	b7 95       	ror	r27
     ee8:	f7 95       	ror	r31
     eea:	9f 5f       	subi	r25, 0xFF	; 255
     eec:	c9 f7       	brne	.-14     	; 0xee0 <__divsf3_pse+0x74>
     eee:	88 0f       	add	r24, r24
     ef0:	91 1d       	adc	r25, r1
     ef2:	96 95       	lsr	r25
     ef4:	87 95       	ror	r24
     ef6:	97 f9       	bld	r25, 7
     ef8:	08 95       	ret
     efa:	e1 e0       	ldi	r30, 0x01	; 1
     efc:	66 0f       	add	r22, r22
     efe:	77 1f       	adc	r23, r23
     f00:	88 1f       	adc	r24, r24
     f02:	bb 1f       	adc	r27, r27
     f04:	62 17       	cp	r22, r18
     f06:	73 07       	cpc	r23, r19
     f08:	84 07       	cpc	r24, r20
     f0a:	ba 07       	cpc	r27, r26
     f0c:	20 f0       	brcs	.+8      	; 0xf16 <__divsf3_pse+0xaa>
     f0e:	62 1b       	sub	r22, r18
     f10:	73 0b       	sbc	r23, r19
     f12:	84 0b       	sbc	r24, r20
     f14:	ba 0b       	sbc	r27, r26
     f16:	ee 1f       	adc	r30, r30
     f18:	88 f7       	brcc	.-30     	; 0xefc <__divsf3_pse+0x90>
     f1a:	e0 95       	com	r30
     f1c:	08 95       	ret

00000f1e <__fixsfsi>:
     f1e:	04 d0       	rcall	.+8      	; 0xf28 <__fixunssfsi>
     f20:	68 94       	set
     f22:	b1 11       	cpse	r27, r1
     f24:	b5 c0       	rjmp	.+362    	; 0x1090 <__fp_szero>
     f26:	08 95       	ret

00000f28 <__fixunssfsi>:
     f28:	98 d0       	rcall	.+304    	; 0x105a <__fp_splitA>
     f2a:	88 f0       	brcs	.+34     	; 0xf4e <__fixunssfsi+0x26>
     f2c:	9f 57       	subi	r25, 0x7F	; 127
     f2e:	90 f0       	brcs	.+36     	; 0xf54 <__fixunssfsi+0x2c>
     f30:	b9 2f       	mov	r27, r25
     f32:	99 27       	eor	r25, r25
     f34:	b7 51       	subi	r27, 0x17	; 23
     f36:	a0 f0       	brcs	.+40     	; 0xf60 <__fixunssfsi+0x38>
     f38:	d1 f0       	breq	.+52     	; 0xf6e <__fixunssfsi+0x46>
     f3a:	66 0f       	add	r22, r22
     f3c:	77 1f       	adc	r23, r23
     f3e:	88 1f       	adc	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	1a f0       	brmi	.+6      	; 0xf4a <__fixunssfsi+0x22>
     f44:	ba 95       	dec	r27
     f46:	c9 f7       	brne	.-14     	; 0xf3a <__fixunssfsi+0x12>
     f48:	12 c0       	rjmp	.+36     	; 0xf6e <__fixunssfsi+0x46>
     f4a:	b1 30       	cpi	r27, 0x01	; 1
     f4c:	81 f0       	breq	.+32     	; 0xf6e <__fixunssfsi+0x46>
     f4e:	9f d0       	rcall	.+318    	; 0x108e <__fp_zero>
     f50:	b1 e0       	ldi	r27, 0x01	; 1
     f52:	08 95       	ret
     f54:	9c c0       	rjmp	.+312    	; 0x108e <__fp_zero>
     f56:	67 2f       	mov	r22, r23
     f58:	78 2f       	mov	r23, r24
     f5a:	88 27       	eor	r24, r24
     f5c:	b8 5f       	subi	r27, 0xF8	; 248
     f5e:	39 f0       	breq	.+14     	; 0xf6e <__fixunssfsi+0x46>
     f60:	b9 3f       	cpi	r27, 0xF9	; 249
     f62:	cc f3       	brlt	.-14     	; 0xf56 <__fixunssfsi+0x2e>
     f64:	86 95       	lsr	r24
     f66:	77 95       	ror	r23
     f68:	67 95       	ror	r22
     f6a:	b3 95       	inc	r27
     f6c:	d9 f7       	brne	.-10     	; 0xf64 <__fixunssfsi+0x3c>
     f6e:	3e f4       	brtc	.+14     	; 0xf7e <__fixunssfsi+0x56>
     f70:	90 95       	com	r25
     f72:	80 95       	com	r24
     f74:	70 95       	com	r23
     f76:	61 95       	neg	r22
     f78:	7f 4f       	sbci	r23, 0xFF	; 255
     f7a:	8f 4f       	sbci	r24, 0xFF	; 255
     f7c:	9f 4f       	sbci	r25, 0xFF	; 255
     f7e:	08 95       	ret

00000f80 <__floatunsisf>:
     f80:	e8 94       	clt
     f82:	09 c0       	rjmp	.+18     	; 0xf96 <__floatsisf+0x12>

00000f84 <__floatsisf>:
     f84:	97 fb       	bst	r25, 7
     f86:	3e f4       	brtc	.+14     	; 0xf96 <__floatsisf+0x12>
     f88:	90 95       	com	r25
     f8a:	80 95       	com	r24
     f8c:	70 95       	com	r23
     f8e:	61 95       	neg	r22
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	8f 4f       	sbci	r24, 0xFF	; 255
     f94:	9f 4f       	sbci	r25, 0xFF	; 255
     f96:	99 23       	and	r25, r25
     f98:	a9 f0       	breq	.+42     	; 0xfc4 <__floatsisf+0x40>
     f9a:	f9 2f       	mov	r31, r25
     f9c:	96 e9       	ldi	r25, 0x96	; 150
     f9e:	bb 27       	eor	r27, r27
     fa0:	93 95       	inc	r25
     fa2:	f6 95       	lsr	r31
     fa4:	87 95       	ror	r24
     fa6:	77 95       	ror	r23
     fa8:	67 95       	ror	r22
     faa:	b7 95       	ror	r27
     fac:	f1 11       	cpse	r31, r1
     fae:	f8 cf       	rjmp	.-16     	; 0xfa0 <__floatsisf+0x1c>
     fb0:	fa f4       	brpl	.+62     	; 0xff0 <__floatsisf+0x6c>
     fb2:	bb 0f       	add	r27, r27
     fb4:	11 f4       	brne	.+4      	; 0xfba <__floatsisf+0x36>
     fb6:	60 ff       	sbrs	r22, 0
     fb8:	1b c0       	rjmp	.+54     	; 0xff0 <__floatsisf+0x6c>
     fba:	6f 5f       	subi	r22, 0xFF	; 255
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	8f 4f       	sbci	r24, 0xFF	; 255
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	16 c0       	rjmp	.+44     	; 0xff0 <__floatsisf+0x6c>
     fc4:	88 23       	and	r24, r24
     fc6:	11 f0       	breq	.+4      	; 0xfcc <__floatsisf+0x48>
     fc8:	96 e9       	ldi	r25, 0x96	; 150
     fca:	11 c0       	rjmp	.+34     	; 0xfee <__floatsisf+0x6a>
     fcc:	77 23       	and	r23, r23
     fce:	21 f0       	breq	.+8      	; 0xfd8 <__floatsisf+0x54>
     fd0:	9e e8       	ldi	r25, 0x8E	; 142
     fd2:	87 2f       	mov	r24, r23
     fd4:	76 2f       	mov	r23, r22
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <__floatsisf+0x5e>
     fd8:	66 23       	and	r22, r22
     fda:	71 f0       	breq	.+28     	; 0xff8 <__floatsisf+0x74>
     fdc:	96 e8       	ldi	r25, 0x86	; 134
     fde:	86 2f       	mov	r24, r22
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	2a f0       	brmi	.+10     	; 0xff0 <__floatsisf+0x6c>
     fe6:	9a 95       	dec	r25
     fe8:	66 0f       	add	r22, r22
     fea:	77 1f       	adc	r23, r23
     fec:	88 1f       	adc	r24, r24
     fee:	da f7       	brpl	.-10     	; 0xfe6 <__floatsisf+0x62>
     ff0:	88 0f       	add	r24, r24
     ff2:	96 95       	lsr	r25
     ff4:	87 95       	ror	r24
     ff6:	97 f9       	bld	r25, 7
     ff8:	08 95       	ret

00000ffa <__fp_inf>:
     ffa:	97 f9       	bld	r25, 7
     ffc:	9f 67       	ori	r25, 0x7F	; 127
     ffe:	80 e8       	ldi	r24, 0x80	; 128
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	08 95       	ret

00001006 <__fp_nan>:
    1006:	9f ef       	ldi	r25, 0xFF	; 255
    1008:	80 ec       	ldi	r24, 0xC0	; 192
    100a:	08 95       	ret

0000100c <__fp_pscA>:
    100c:	00 24       	eor	r0, r0
    100e:	0a 94       	dec	r0
    1010:	16 16       	cp	r1, r22
    1012:	17 06       	cpc	r1, r23
    1014:	18 06       	cpc	r1, r24
    1016:	09 06       	cpc	r0, r25
    1018:	08 95       	ret

0000101a <__fp_pscB>:
    101a:	00 24       	eor	r0, r0
    101c:	0a 94       	dec	r0
    101e:	12 16       	cp	r1, r18
    1020:	13 06       	cpc	r1, r19
    1022:	14 06       	cpc	r1, r20
    1024:	05 06       	cpc	r0, r21
    1026:	08 95       	ret

00001028 <__fp_round>:
    1028:	09 2e       	mov	r0, r25
    102a:	03 94       	inc	r0
    102c:	00 0c       	add	r0, r0
    102e:	11 f4       	brne	.+4      	; 0x1034 <__fp_round+0xc>
    1030:	88 23       	and	r24, r24
    1032:	52 f0       	brmi	.+20     	; 0x1048 <__fp_round+0x20>
    1034:	bb 0f       	add	r27, r27
    1036:	40 f4       	brcc	.+16     	; 0x1048 <__fp_round+0x20>
    1038:	bf 2b       	or	r27, r31
    103a:	11 f4       	brne	.+4      	; 0x1040 <__fp_round+0x18>
    103c:	60 ff       	sbrs	r22, 0
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <__fp_round+0x20>
    1040:	6f 5f       	subi	r22, 0xFF	; 255
    1042:	7f 4f       	sbci	r23, 0xFF	; 255
    1044:	8f 4f       	sbci	r24, 0xFF	; 255
    1046:	9f 4f       	sbci	r25, 0xFF	; 255
    1048:	08 95       	ret

0000104a <__fp_split3>:
    104a:	57 fd       	sbrc	r21, 7
    104c:	90 58       	subi	r25, 0x80	; 128
    104e:	44 0f       	add	r20, r20
    1050:	55 1f       	adc	r21, r21
    1052:	59 f0       	breq	.+22     	; 0x106a <__fp_splitA+0x10>
    1054:	5f 3f       	cpi	r21, 0xFF	; 255
    1056:	71 f0       	breq	.+28     	; 0x1074 <__fp_splitA+0x1a>
    1058:	47 95       	ror	r20

0000105a <__fp_splitA>:
    105a:	88 0f       	add	r24, r24
    105c:	97 fb       	bst	r25, 7
    105e:	99 1f       	adc	r25, r25
    1060:	61 f0       	breq	.+24     	; 0x107a <__fp_splitA+0x20>
    1062:	9f 3f       	cpi	r25, 0xFF	; 255
    1064:	79 f0       	breq	.+30     	; 0x1084 <__fp_splitA+0x2a>
    1066:	87 95       	ror	r24
    1068:	08 95       	ret
    106a:	12 16       	cp	r1, r18
    106c:	13 06       	cpc	r1, r19
    106e:	14 06       	cpc	r1, r20
    1070:	55 1f       	adc	r21, r21
    1072:	f2 cf       	rjmp	.-28     	; 0x1058 <__fp_split3+0xe>
    1074:	46 95       	lsr	r20
    1076:	f1 df       	rcall	.-30     	; 0x105a <__fp_splitA>
    1078:	08 c0       	rjmp	.+16     	; 0x108a <__fp_splitA+0x30>
    107a:	16 16       	cp	r1, r22
    107c:	17 06       	cpc	r1, r23
    107e:	18 06       	cpc	r1, r24
    1080:	99 1f       	adc	r25, r25
    1082:	f1 cf       	rjmp	.-30     	; 0x1066 <__fp_splitA+0xc>
    1084:	86 95       	lsr	r24
    1086:	71 05       	cpc	r23, r1
    1088:	61 05       	cpc	r22, r1
    108a:	08 94       	sec
    108c:	08 95       	ret

0000108e <__fp_zero>:
    108e:	e8 94       	clt

00001090 <__fp_szero>:
    1090:	bb 27       	eor	r27, r27
    1092:	66 27       	eor	r22, r22
    1094:	77 27       	eor	r23, r23
    1096:	cb 01       	movw	r24, r22
    1098:	97 f9       	bld	r25, 7
    109a:	08 95       	ret

0000109c <__udivmodhi4>:
    109c:	aa 1b       	sub	r26, r26
    109e:	bb 1b       	sub	r27, r27
    10a0:	51 e1       	ldi	r21, 0x11	; 17
    10a2:	07 c0       	rjmp	.+14     	; 0x10b2 <__udivmodhi4_ep>

000010a4 <__udivmodhi4_loop>:
    10a4:	aa 1f       	adc	r26, r26
    10a6:	bb 1f       	adc	r27, r27
    10a8:	a6 17       	cp	r26, r22
    10aa:	b7 07       	cpc	r27, r23
    10ac:	10 f0       	brcs	.+4      	; 0x10b2 <__udivmodhi4_ep>
    10ae:	a6 1b       	sub	r26, r22
    10b0:	b7 0b       	sbc	r27, r23

000010b2 <__udivmodhi4_ep>:
    10b2:	88 1f       	adc	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	5a 95       	dec	r21
    10b8:	a9 f7       	brne	.-22     	; 0x10a4 <__udivmodhi4_loop>
    10ba:	80 95       	com	r24
    10bc:	90 95       	com	r25
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	08 95       	ret

000010c4 <_exit>:
    10c4:	f8 94       	cli

000010c6 <__stop_program>:
    10c6:	ff cf       	rjmp	.-2      	; 0x10c6 <__stop_program>
