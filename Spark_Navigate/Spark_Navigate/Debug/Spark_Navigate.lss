
Spark_Navigate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000fc8  0000105c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800078  00800078  00001074  2**0
                  ALLOC
  3 .stab         00001c50  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005e5  00000000  00000000  00002cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000032b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001404  00000000  00000000  00003350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003d7  00000000  00000000  00004754  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f2  00000000  00000000  00004b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004dc  00000000  00000000  00005220  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055f  00000000  00000000  000056fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b9c  00000000  00000000  00005c5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_1>
   8:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3a       	cpi	r26, 0xAC	; 172
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 06 06 	call	0xc0c	; 0xc0c <main>
  8a:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <readSensor>:
	}
	stop(); //Stop robot
}

void readSensor()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	highcurrent=0;
  96:	10 92 79 00 	sts	0x0079, r1
  9a:	10 92 78 00 	sts	0x0078, r1
	highcount=0;
  9e:	10 92 7b 00 	sts	0x007B, r1
  a2:	10 92 7a 00 	sts	0x007A, r1
	sensor(0,th[0],avg[0]);
  a6:	ce e7       	ldi	r28, 0x7E	; 126
  a8:	d2 e0       	ldi	r29, 0x02	; 2
  aa:	60 91 80 00 	lds	r22, 0x0080
  ae:	70 91 81 00 	lds	r23, 0x0081
  b2:	40 91 71 00 	lds	r20, 0x0071
  b6:	50 91 72 00 	lds	r21, 0x0072
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fe 01       	movw	r30, r28
  c0:	09 95       	icall
	sensor(1,th[1],avg[1]);
  c2:	60 91 82 00 	lds	r22, 0x0082
  c6:	70 91 83 00 	lds	r23, 0x0083
  ca:	40 91 73 00 	lds	r20, 0x0073
  ce:	50 91 74 00 	lds	r21, 0x0074
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fe 01       	movw	r30, r28
  d8:	09 95       	icall
	sensor(2,th[2],avg[2]);
  da:	60 91 84 00 	lds	r22, 0x0084
  de:	70 91 85 00 	lds	r23, 0x0085
  e2:	40 91 75 00 	lds	r20, 0x0075
  e6:	50 91 76 00 	lds	r21, 0x0076
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fe 01       	movw	r30, r28
  f0:	09 95       	icall
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <proportional>:
		th[n]=0;
	}
	lcd_print(1, 3-n, th[n], 1);
}
void proportional()
{
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
	error = ((double)highcurrent/highcount)-target;
 100:	60 91 78 00 	lds	r22, 0x0078
 104:	70 91 79 00 	lds	r23, 0x0079
 108:	88 27       	eor	r24, r24
 10a:	77 fd       	sbrc	r23, 7
 10c:	80 95       	com	r24
 10e:	98 2f       	mov	r25, r24
 110:	0e 94 42 07 	call	0xe84	; 0xe84 <__floatsisf>
 114:	6b 01       	movw	r12, r22
 116:	7c 01       	movw	r14, r24
 118:	60 91 7a 00 	lds	r22, 0x007A
 11c:	70 91 7b 00 	lds	r23, 0x007B
 120:	88 27       	eor	r24, r24
 122:	77 fd       	sbrc	r23, 7
 124:	80 95       	com	r24
 126:	98 2f       	mov	r25, r24
 128:	0e 94 42 07 	call	0xe84	; 0xe84 <__floatsisf>
 12c:	9b 01       	movw	r18, r22
 12e:	ac 01       	movw	r20, r24
 130:	c7 01       	movw	r24, r14
 132:	b6 01       	movw	r22, r12
 134:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__divsf3>
 138:	6b 01       	movw	r12, r22
 13a:	7c 01       	movw	r14, r24
 13c:	60 91 6f 00 	lds	r22, 0x006F
 140:	70 91 70 00 	lds	r23, 0x0070
 144:	88 27       	eor	r24, r24
 146:	77 fd       	sbrc	r23, 7
 148:	80 95       	com	r24
 14a:	98 2f       	mov	r25, r24
 14c:	0e 94 42 07 	call	0xe84	; 0xe84 <__floatsisf>
 150:	9b 01       	movw	r18, r22
 152:	ac 01       	movw	r20, r24
 154:	c7 01       	movw	r24, r14
 156:	b6 01       	movw	r22, r12
 158:	0e 94 42 06 	call	0xc84	; 0xc84 <__subsf3>
 15c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__fixsfsi>
 160:	ab 01       	movw	r20, r22
 162:	bc 01       	movw	r22, r24
 164:	ca 01       	movw	r24, r20
 166:	50 93 7f 00 	sts	0x007F, r21
 16a:	40 93 7e 00 	sts	0x007E, r20
	p=(kp*error);
 16e:	40 91 6d 00 	lds	r20, 0x006D
 172:	50 91 6e 00 	lds	r21, 0x006E
 176:	84 9f       	mul	r24, r20
 178:	90 01       	movw	r18, r0
 17a:	85 9f       	mul	r24, r21
 17c:	30 0d       	add	r19, r0
 17e:	94 9f       	mul	r25, r20
 180:	30 0d       	add	r19, r0
 182:	11 24       	eor	r1, r1
 184:	30 93 7d 00 	sts	0x007D, r19
 188:	20 93 7c 00 	sts	0x007C, r18
	if(th[0]==0 && th[1]==0 && th[2]==0)
 18c:	80 91 80 00 	lds	r24, 0x0080
 190:	90 91 81 00 	lds	r25, 0x0081
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	81 f4       	brne	.+32     	; 0x1b8 <proportional+0xc0>
 198:	80 91 82 00 	lds	r24, 0x0082
 19c:	90 91 83 00 	lds	r25, 0x0083
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	51 f4       	brne	.+20     	; 0x1b8 <proportional+0xc0>
 1a4:	80 91 84 00 	lds	r24, 0x0084
 1a8:	90 91 85 00 	lds	r25, 0x0085
 1ac:	00 97       	sbiw	r24, 0x00	; 0
 1ae:	21 f4       	brne	.+8      	; 0x1b8 <proportional+0xc0>
	{
		p=0;
 1b0:	10 92 7d 00 	sts	0x007D, r1
 1b4:	10 92 7c 00 	sts	0x007C, r1
	}
}
 1b8:	ff 90       	pop	r15
 1ba:	ef 90       	pop	r14
 1bc:	df 90       	pop	r13
 1be:	cf 90       	pop	r12
 1c0:	08 95       	ret

000001c2 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1c2:	95 b3       	in	r25, 0x15	; 21
 1c4:	9f 70       	andi	r25, 0x0F	; 15
 1c6:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
 1c8:	95 b3       	in	r25, 0x15	; 21
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1ca:	28 2f       	mov	r18, r24
 1cc:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1ce:	92 2b       	or	r25, r18
 1d0:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
 1d2:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 1d4:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 1d6:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	e1 ee       	ldi	r30, 0xE1	; 225
 1da:	f4 e0       	ldi	r31, 0x04	; 4
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_wr_command+0x1a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_wr_command+0x20>
 1e2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1e4:	aa 98       	cbi	0x15, 2	; 21
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1e6:	95 b3       	in	r25, 0x15	; 21
 1e8:	9f 70       	andi	r25, 0x0F	; 15
 1ea:	95 bb       	out	0x15, r25	; 21
	lcd_port |= cmd;
 1ec:	95 b3       	in	r25, 0x15	; 21
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1ee:	82 95       	swap	r24
 1f0:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 1f2:	89 2b       	or	r24, r25
 1f4:	85 bb       	out	0x15, r24	; 21
	cbit(lcd_port,RS);
 1f6:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 1f8:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 1fa:	aa 9a       	sbi	0x15, 2	; 21
 1fc:	81 ee       	ldi	r24, 0xE1	; 225
 1fe:	94 e0       	ldi	r25, 0x04	; 4
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_wr_command+0x3e>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_wr_command+0x44>
 206:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 208:	aa 98       	cbi	0x15, 2	; 21
}
 20a:	08 95       	ret

0000020c <lcd_set_4bit>:
 20c:	89 ef       	ldi	r24, 0xF9	; 249
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_set_4bit+0x4>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_set_4bit+0xa>
 216:	00 00       	nop
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 218:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 21a:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
 21c:	80 e3       	ldi	r24, 0x30	; 48
 21e:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
 220:	aa 9a       	sbi	0x15, 2	; 21
 222:	e1 ee       	ldi	r30, 0xE1	; 225
 224:	f4 e0       	ldi	r31, 0x04	; 4
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0x1a>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_set_4bit+0x20>
 22c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 22e:	aa 98       	cbi	0x15, 2	; 21
 230:	e9 ef       	ldi	r30, 0xF9	; 249
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_set_4bit+0x28>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_set_4bit+0x2e>
 23a:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 23c:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 23e:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
 240:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
 242:	aa 9a       	sbi	0x15, 2	; 21
 244:	e1 ee       	ldi	r30, 0xE1	; 225
 246:	f4 e0       	ldi	r31, 0x04	; 4
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_set_4bit+0x3c>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_set_4bit+0x42>
 24e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 250:	aa 98       	cbi	0x15, 2	; 21
 252:	e9 ef       	ldi	r30, 0xF9	; 249
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_set_4bit+0x4a>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_set_4bit+0x50>
 25c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 25e:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 260:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
 262:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
 264:	aa 9a       	sbi	0x15, 2	; 21
 266:	81 ee       	ldi	r24, 0xE1	; 225
 268:	94 e0       	ldi	r25, 0x04	; 4
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_set_4bit+0x5e>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_set_4bit+0x64>
 270:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 272:	aa 98       	cbi	0x15, 2	; 21
 274:	e9 ef       	ldi	r30, 0xF9	; 249
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_set_4bit+0x6c>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <lcd_set_4bit+0x72>
 27e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 280:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 282:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 284:	80 e2       	ldi	r24, 0x20	; 32
 286:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
 288:	aa 9a       	sbi	0x15, 2	; 21
 28a:	81 ee       	ldi	r24, 0xE1	; 225
 28c:	94 e0       	ldi	r25, 0x04	; 4
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_set_4bit+0x82>
 292:	00 c0       	rjmp	.+0      	; 0x294 <lcd_set_4bit+0x88>
 294:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 296:	aa 98       	cbi	0x15, 2	; 21

	
}
 298:	08 95       	ret

0000029a <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	89 ef       	ldi	r24, 0xF9	; 249
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <lcd_init+0x8>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <lcd_init+0xe>
 2a8:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 2aa:	c1 ee       	ldi	r28, 0xE1	; 225
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
 2ae:	88 e2       	ldi	r24, 0x28	; 40
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	fe 01       	movw	r30, r28
 2b4:	09 95       	icall
	lcd_wr_command(0x01);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	fe 01       	movw	r30, r28
 2bc:	09 95       	icall
	lcd_wr_command(0x06);
 2be:	86 e0       	ldi	r24, 0x06	; 6
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	fe 01       	movw	r30, r28
 2c4:	09 95       	icall
	lcd_wr_command(0x0E);
 2c6:	8e e0       	ldi	r24, 0x0E	; 14
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	fe 01       	movw	r30, r28
 2cc:	09 95       	icall
	lcd_wr_command(0x80);
 2ce:	80 e8       	ldi	r24, 0x80	; 128
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	fe 01       	movw	r30, r28
 2d4:	09 95       	icall
		
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 2dc:	95 b3       	in	r25, 0x15	; 21
 2de:	9f 70       	andi	r25, 0x0F	; 15
 2e0:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
 2e2:	95 b3       	in	r25, 0x15	; 21
/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 2e4:	28 2f       	mov	r18, r24
 2e6:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 2e8:	92 2b       	or	r25, r18
 2ea:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
 2ec:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 2ee:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 2f0:	aa 9a       	sbi	0x15, 2	; 21
 2f2:	e1 ee       	ldi	r30, 0xE1	; 225
 2f4:	f4 e0       	ldi	r31, 0x04	; 4
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_wr_char+0x1a>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_wr_char+0x20>
 2fc:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 2fe:	aa 98       	cbi	0x15, 2	; 21

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 300:	95 b3       	in	r25, 0x15	; 21
 302:	9f 70       	andi	r25, 0x0F	; 15
 304:	95 bb       	out	0x15, r25	; 21
	lcd_port |= letter;
 306:	95 b3       	in	r25, 0x15	; 21
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 308:	82 95       	swap	r24
 30a:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 30c:	89 2b       	or	r24, r25
 30e:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,RS);
 310:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 312:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 314:	aa 9a       	sbi	0x15, 2	; 21
 316:	81 ee       	ldi	r24, 0xE1	; 225
 318:	94 e0       	ldi	r25, 0x04	; 4
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <lcd_wr_char+0x3e>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <lcd_wr_char+0x44>
 320:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 322:	aa 98       	cbi	0x15, 2	; 21
}
 324:	08 95       	ret

00000326 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
 326:	80 e8       	ldi	r24, 0x80	; 128
 328:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
}
 32c:	08 95       	ret

0000032e <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	ec 01       	movw	r28, r24
	while(*str != '\0')
 334:	88 81       	ld	r24, Y
 336:	88 23       	and	r24, r24
 338:	31 f0       	breq	.+12     	; 0x346 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
 33a:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 33c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_char>


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
 340:	89 91       	ld	r24, Y+
 342:	88 23       	and	r24, r24
 344:	d9 f7       	brne	.-10     	; 0x33c <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	79 f0       	breq	.+30     	; 0x36e <lcd_cursor+0x22>
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	18 f4       	brcc	.+6      	; 0x35a <lcd_cursor+0xe>
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	c9 f4       	brne	.+50     	; 0x38a <lcd_cursor+0x3e>
 358:	05 c0       	rjmp	.+10     	; 0x364 <lcd_cursor+0x18>
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	69 f0       	breq	.+26     	; 0x378 <lcd_cursor+0x2c>
 35e:	84 30       	cpi	r24, 0x04	; 4
 360:	a1 f4       	brne	.+40     	; 0x38a <lcd_cursor+0x3e>
 362:	0f c0       	rjmp	.+30     	; 0x382 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 364:	86 2f       	mov	r24, r22
 366:	81 58       	subi	r24, 0x81	; 129
 368:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
 36c:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 36e:	86 2f       	mov	r24, r22
 370:	81 54       	subi	r24, 0x41	; 65
 372:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
 376:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 378:	86 2f       	mov	r24, r22
 37a:	8d 56       	subi	r24, 0x6D	; 109
 37c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
 380:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 382:	86 2f       	mov	r24, r22
 384:	8d 52       	subi	r24, 0x2D	; 45
 386:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
 38a:	08 95       	ret

0000038c <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	8a 01       	movw	r16, r20
 396:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 398:	88 23       	and	r24, r24
 39a:	11 f0       	breq	.+4      	; 0x3a0 <lcd_print+0x14>
 39c:	66 23       	and	r22, r22
 39e:	19 f4       	brne	.+6      	; 0x3a6 <lcd_print+0x1a>
	{
		lcd_home();
 3a0:	0e 94 93 01 	call	0x326	; 0x326 <lcd_home>
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 3a6:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_cursor>
	}
	if(digits==5 || flag==1)
 3aa:	c5 30       	cpi	r28, 0x05	; 5
 3ac:	d1 05       	cpc	r29, r1
 3ae:	71 f4       	brne	.+28     	; 0x3cc <lcd_print+0x40>
	{
		million=value/10000+48;
 3b0:	c8 01       	movw	r24, r16
 3b2:	60 e1       	ldi	r22, 0x10	; 16
 3b4:	77 e2       	ldi	r23, 0x27	; 39
 3b6:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__udivmodhi4>
 3ba:	cb 01       	movw	r24, r22
 3bc:	c0 96       	adiw	r24, 0x30	; 48
 3be:	90 93 9d 00 	sts	0x009D, r25
 3c2:	80 93 9c 00 	sts	0x009C, r24
		lcd_wr_char(million);
 3c6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_char>
 3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 3cc:	c4 30       	cpi	r28, 0x04	; 4
 3ce:	d1 05       	cpc	r29, r1
 3d0:	b9 f4       	brne	.+46     	; 0x400 <lcd_print+0x74>
	{
		temp = value/1000;
 3d2:	c8 01       	movw	r24, r16
 3d4:	68 ee       	ldi	r22, 0xE8	; 232
 3d6:	73 e0       	ldi	r23, 0x03	; 3
 3d8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__udivmodhi4>
 3dc:	cb 01       	movw	r24, r22
 3de:	70 93 9f 00 	sts	0x009F, r23
 3e2:	60 93 9e 00 	sts	0x009E, r22
		thousand = temp%10 + 48;
 3e6:	6a e0       	ldi	r22, 0x0A	; 10
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__udivmodhi4>
 3ee:	c0 96       	adiw	r24, 0x30	; 48
 3f0:	90 93 ab 00 	sts	0x00AB, r25
 3f4:	80 93 aa 00 	sts	0x00AA, r24
		lcd_wr_char(thousand);
 3f8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_char>
		flag=1;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	01 c0       	rjmp	.+2      	; 0x402 <lcd_print+0x76>
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 400:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 402:	c3 30       	cpi	r28, 0x03	; 3
 404:	d1 05       	cpc	r29, r1
 406:	11 f0       	breq	.+4      	; 0x40c <lcd_print+0x80>
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	b1 f4       	brne	.+44     	; 0x438 <lcd_print+0xac>
	{
		temp = value/100;
 40c:	c8 01       	movw	r24, r16
 40e:	64 e6       	ldi	r22, 0x64	; 100
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__udivmodhi4>
 416:	cb 01       	movw	r24, r22
 418:	70 93 9f 00 	sts	0x009F, r23
 41c:	60 93 9e 00 	sts	0x009E, r22
		hundred = temp%10 + 48;
 420:	6a e0       	ldi	r22, 0x0A	; 10
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__udivmodhi4>
 428:	c0 96       	adiw	r24, 0x30	; 48
 42a:	90 93 a7 00 	sts	0x00A7, r25
 42e:	80 93 a6 00 	sts	0x00A6, r24
		lcd_wr_char(hundred);
 432:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_char>
		flag=1;
 436:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 438:	c2 30       	cpi	r28, 0x02	; 2
 43a:	d1 05       	cpc	r29, r1
 43c:	11 f0       	breq	.+4      	; 0x442 <lcd_print+0xb6>
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	b1 f4       	brne	.+44     	; 0x46e <__stack+0xf>
	{
		temp = value/10;
 442:	2a e0       	ldi	r18, 0x0A	; 10
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	c8 01       	movw	r24, r16
 448:	b9 01       	movw	r22, r18
 44a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__udivmodhi4>
 44e:	cb 01       	movw	r24, r22
 450:	70 93 9f 00 	sts	0x009F, r23
 454:	60 93 9e 00 	sts	0x009E, r22
		tens = temp%10 + 48;
 458:	b9 01       	movw	r22, r18
 45a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__udivmodhi4>
 45e:	c0 96       	adiw	r24, 0x30	; 48
 460:	90 93 a5 00 	sts	0x00A5, r25
 464:	80 93 a4 00 	sts	0x00A4, r24
		lcd_wr_char(tens);
 468:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_char>
		flag=1;
 46c:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 46e:	c1 30       	cpi	r28, 0x01	; 1
 470:	d1 05       	cpc	r29, r1
 472:	11 f0       	breq	.+4      	; 0x478 <__stack+0x19>
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	61 f4       	brne	.+24     	; 0x490 <__stack+0x31>
	{
		unit = value%10 + 48;
 478:	c8 01       	movw	r24, r16
 47a:	6a e0       	ldi	r22, 0x0A	; 10
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__udivmodhi4>
 482:	c0 96       	adiw	r24, 0x30	; 48
 484:	90 93 a9 00 	sts	0x00A9, r25
 488:	80 93 a8 00 	sts	0x00A8, r24
		lcd_wr_char(unit);
 48c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_char>
	}
	if(digits>5)
 490:	c6 30       	cpi	r28, 0x06	; 6
 492:	d1 05       	cpc	r29, r1
 494:	1c f0       	brlt	.+6      	; 0x49c <__stack+0x3d>
	{
		lcd_wr_char('E');
 496:	85 e4       	ldi	r24, 0x45	; 69
 498:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_wr_char>
	}
	
}
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	08 95       	ret

000004a6 <lcd_port_config>:
unsigned char Right_white_line = 0;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
 4a6:	84 b3       	in	r24, 0x14	; 20
 4a8:	87 6f       	ori	r24, 0xF7	; 247
 4aa:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
 4ac:	85 b3       	in	r24, 0x15	; 21
 4ae:	80 78       	andi	r24, 0x80	; 128
 4b0:	85 bb       	out	0x15, r24	; 21
}
 4b2:	08 95       	ret

000004b4 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;   //set PORTF direction as input
 4b4:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00;  //set PORTF pins floating
 4b6:	1b ba       	out	0x1b, r1	; 27
}
 4b8:	08 95       	ret

000004ba <timer1_init>:
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
 4ba:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0xFF; //setup
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	8d bd       	out	0x2d, r24	; 45
 TCNT1L = 0x01;
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	9c bd       	out	0x2c, r25	; 44
 OCR1AH = 0x00;
 4c4:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0xFF;
 4c6:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x00;
 4c8:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0xFF;
 4ca:	88 bd       	out	0x28, r24	; 40
 ICR1H  = 0x00;
 4cc:	17 bc       	out	0x27, r1	; 39
 ICR1L  = 0xFF;
 4ce:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA1;
 4d0:	81 ea       	ldi	r24, 0xA1	; 161
 4d2:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x0D; //start Timer
 4d4:	8d e0       	ldi	r24, 0x0D	; 13
 4d6:	8e bd       	out	0x2e, r24	; 46
}
 4d8:	08 95       	ret

000004da <adc_init>:


//Function to Initialize ADC
void adc_init()
{
 ADCSRA = 0x00;
 4da:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 4dc:	80 e2       	ldi	r24, 0x20	; 32
 4de:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80;
 4e0:	80 e8       	ldi	r24, 0x80	; 128
 4e2:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 4e4:	86 e8       	ldi	r24, 0x86	; 134
 4e6:	86 b9       	out	0x06, r24	; 6
}
 4e8:	08 95       	ret

000004ea <ADC_Conversion>:

//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 4ea:	87 70       	andi	r24, 0x07	; 7
 ADMUX= 0x20| Ch;	   		
 4ec:	80 62       	ori	r24, 0x20	; 32
 4ee:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
 4f0:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
 4f2:	34 9b       	sbis	0x06, 4	; 6
 4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <ADC_Conversion+0x8>
 a=ADCH;
 4f6:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 4f8:	34 9a       	sbi	0x06, 4	; 6
 return a;
}
 4fa:	08 95       	ret

000004fc <sensor>:
	sensor(0,th[0],avg[0]);
	sensor(1,th[1],avg[1]);
	sensor(2,th[2],avg[2]);
}
void sensor(int n,int sn,int avgn)
{
 4fc:	ef 92       	push	r14
 4fe:	ff 92       	push	r15
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	7c 01       	movw	r14, r24
 508:	ea 01       	movw	r28, r20
	sn=ADC_Conversion(n+3);
 50a:	18 2f       	mov	r17, r24
 50c:	8d 5f       	subi	r24, 0xFD	; 253
 50e:	0e 94 75 02 	call	0x4ea	; 0x4ea <ADC_Conversion>
 512:	90 e0       	ldi	r25, 0x00	; 0
	if(sn>=avgn)
 514:	8c 17       	cp	r24, r28
 516:	9d 07       	cpc	r25, r29
 518:	fc f0       	brlt	.+62     	; 0x558 <sensor+0x5c>
	{
		th[n]=1;
 51a:	f7 01       	movw	r30, r14
 51c:	ee 0f       	add	r30, r30
 51e:	ff 1f       	adc	r31, r31
 520:	e0 58       	subi	r30, 0x80	; 128
 522:	ff 4f       	sbci	r31, 0xFF	; 255
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	91 83       	std	Z+1, r25	; 0x01
 52a:	80 83       	st	Z, r24
		highcount++;
 52c:	80 91 7a 00 	lds	r24, 0x007A
 530:	90 91 7b 00 	lds	r25, 0x007B
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	90 93 7b 00 	sts	0x007B, r25
 53a:	80 93 7a 00 	sts	0x007A, r24
		highcurrent+=(n+1);
 53e:	c7 01       	movw	r24, r14
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	20 91 78 00 	lds	r18, 0x0078
 546:	30 91 79 00 	lds	r19, 0x0079
 54a:	82 0f       	add	r24, r18
 54c:	93 1f       	adc	r25, r19
 54e:	90 93 79 00 	sts	0x0079, r25
 552:	80 93 78 00 	sts	0x0078, r24
 556:	07 c0       	rjmp	.+14     	; 0x566 <sensor+0x6a>
	}
	else if(sn<avgn)
	{
		th[n]=0;
 558:	f7 01       	movw	r30, r14
 55a:	ee 0f       	add	r30, r30
 55c:	ff 1f       	adc	r31, r31
 55e:	e0 58       	subi	r30, 0x80	; 128
 560:	ff 4f       	sbci	r31, 0xFF	; 255
 562:	11 82       	std	Z+1, r1	; 0x01
 564:	10 82       	st	Z, r1
	}
	lcd_print(1, 3-n, th[n], 1);
 566:	63 e0       	ldi	r22, 0x03	; 3
 568:	61 1b       	sub	r22, r17
 56a:	f7 01       	movw	r30, r14
 56c:	ee 0f       	add	r30, r30
 56e:	ff 1f       	adc	r31, r31
 570:	e0 58       	subi	r30, 0x80	; 128
 572:	ff 4f       	sbci	r31, 0xFF	; 255
 574:	40 81       	ld	r20, Z
 576:	51 81       	ldd	r21, Z+1	; 0x01
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	21 e0       	ldi	r18, 0x01	; 1
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_print>
}
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	1f 91       	pop	r17
 588:	ff 90       	pop	r15
 58a:	ef 90       	pop	r14
 58c:	08 95       	ret

0000058e <print_sensor>:

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
void print_sensor(char row, char coloumn,unsigned char channel)
{
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	d8 2f       	mov	r29, r24
 594:	c6 2f       	mov	r28, r22
 596:	84 2f       	mov	r24, r20
 ADC_Value = ADC_Conversion(channel);
 598:	0e 94 75 02 	call	0x4ea	; 0x4ea <ADC_Conversion>
 59c:	48 2f       	mov	r20, r24
 59e:	80 93 a0 00 	sts	0x00A0, r24
 lcd_print(row, coloumn, ADC_Value, 3);
 5a2:	8d 2f       	mov	r24, r29
 5a4:	6c 2f       	mov	r22, r28
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	23 e0       	ldi	r18, 0x03	; 3
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_print>
}
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <velocity>:
}*/

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
 5b6:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor; 
 5b8:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x00;
 5ba:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
 5bc:	68 bd       	out	0x28, r22	; 40
}
 5be:	08 95       	ret

000005c0 <left_encoder_pin_config>:
}
*/
//Function to configure INT1 (PORTD 3) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRD  = DDRD & 0xF7;  //Set the direction of the PORTD 3 pin as input
 5c0:	8b 98       	cbi	0x11, 3	; 17
 PORTD = PORTD | 0x08; //Enable internal pull-up for PORTD 3 pin
 5c2:	93 9a       	sbi	0x12, 3	; 18
}
 5c4:	08 95       	ret

000005c6 <right_encoder_pin_config>:

//Function to configure INT0 (PORTD 2) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRD  = DDRD & 0xFB;  //Set the direction of the PORTD 2 pin as input
 5c6:	8a 98       	cbi	0x11, 2	; 17
 PORTD = PORTD | 0x04; //Enable internal pull-up for PORTD 2 pin
 5c8:	92 9a       	sbi	0x12, 2	; 18
}
 5ca:	08 95       	ret

000005cc <left_position_encoder_interrupt_init>:
 right_encoder_pin_config();   //right encoder pin config	
}*/

void left_position_encoder_interrupt_init (void) //Interrupt 1 enable
{
 cli(); //Clears the global interrupt
 5cc:	f8 94       	cli
 MCUCR = MCUCR | 0x08; // INT1 is set to trigger with falling edge
 5ce:	85 b7       	in	r24, 0x35	; 53
 5d0:	88 60       	ori	r24, 0x08	; 8
 5d2:	85 bf       	out	0x35, r24	; 53
 GICR = GICR | 0x80;   // Enable Interrupt INT1 for left position encoder
 5d4:	8b b7       	in	r24, 0x3b	; 59
 5d6:	80 68       	ori	r24, 0x80	; 128
 5d8:	8b bf       	out	0x3b, r24	; 59
 sei(); // Enables the global interrupt 
 5da:	78 94       	sei
}
 5dc:	08 95       	ret

000005de <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 0 enable
{
 cli(); //Clears the global interrupt
 5de:	f8 94       	cli
 MCUCR = MCUCR | 0x02; // INT0 is set to trigger with falling edge
 5e0:	85 b7       	in	r24, 0x35	; 53
 5e2:	82 60       	ori	r24, 0x02	; 2
 5e4:	85 bf       	out	0x35, r24	; 53
 GICR = GICR | 0x40;   // Enable Interrupt INT5 for right position encoder
 5e6:	8b b7       	in	r24, 0x3b	; 59
 5e8:	80 64       	ori	r24, 0x40	; 64
 5ea:	8b bf       	out	0x3b, r24	; 59
 sei(); // Enables the global interrupt 
 5ec:	78 94       	sei
}
 5ee:	08 95       	ret

000005f0 <__vector_1>:

//ISR for right position encoder
ISR(INT0_vect)  
{
 5f0:	1f 92       	push	r1
 5f2:	0f 92       	push	r0
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
 5fe:	af 93       	push	r26
 600:	bf 93       	push	r27
 ShaftCountRight++;  //increment right shaft position count
 602:	80 91 8e 00 	lds	r24, 0x008E
 606:	90 91 8f 00 	lds	r25, 0x008F
 60a:	a0 91 90 00 	lds	r26, 0x0090
 60e:	b0 91 91 00 	lds	r27, 0x0091
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	a1 1d       	adc	r26, r1
 616:	b1 1d       	adc	r27, r1
 618:	80 93 8e 00 	sts	0x008E, r24
 61c:	90 93 8f 00 	sts	0x008F, r25
 620:	a0 93 90 00 	sts	0x0090, r26
 624:	b0 93 91 00 	sts	0x0091, r27
}
 628:	bf 91       	pop	r27
 62a:	af 91       	pop	r26
 62c:	9f 91       	pop	r25
 62e:	8f 91       	pop	r24
 630:	0f 90       	pop	r0
 632:	0f be       	out	0x3f, r0	; 63
 634:	0f 90       	pop	r0
 636:	1f 90       	pop	r1
 638:	18 95       	reti

0000063a <__vector_2>:

//ISR for left position encoder
ISR(INT1_vect)
{
 63a:	1f 92       	push	r1
 63c:	0f 92       	push	r0
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	0f 92       	push	r0
 642:	11 24       	eor	r1, r1
 644:	8f 93       	push	r24
 646:	9f 93       	push	r25
 648:	af 93       	push	r26
 64a:	bf 93       	push	r27
 ShaftCountLeft++;  //increment left shaft position count
 64c:	80 91 92 00 	lds	r24, 0x0092
 650:	90 91 93 00 	lds	r25, 0x0093
 654:	a0 91 94 00 	lds	r26, 0x0094
 658:	b0 91 95 00 	lds	r27, 0x0095
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	a1 1d       	adc	r26, r1
 660:	b1 1d       	adc	r27, r1
 662:	80 93 92 00 	sts	0x0092, r24
 666:	90 93 93 00 	sts	0x0093, r25
 66a:	a0 93 94 00 	sts	0x0094, r26
 66e:	b0 93 95 00 	sts	0x0095, r27
}
 672:	bf 91       	pop	r27
 674:	af 91       	pop	r26
 676:	9f 91       	pop	r25
 678:	8f 91       	pop	r24
 67a:	0f 90       	pop	r0
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	0f 90       	pop	r0
 680:	1f 90       	pop	r1
 682:	18 95       	reti

00000684 <angle_rotate>:
}
*/

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = (float) Degrees/ 12.85; // division by resolution to get shaft count 
 68a:	bc 01       	movw	r22, r24
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 40 07 	call	0xe80	; 0xe80 <__floatunsisf>
 694:	2a e9       	ldi	r18, 0x9A	; 154
 696:	39 e9       	ldi	r19, 0x99	; 153
 698:	4d e4       	ldi	r20, 0x4D	; 77
 69a:	51 e4       	ldi	r21, 0x41	; 65
 69c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__divsf3>
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
 6a0:	0e 94 14 07 	call	0xe28	; 0xe28 <__fixunssfsi>
 6a4:	dc 01       	movw	r26, r24
 6a6:	cb 01       	movw	r24, r22
 6a8:	a0 e0       	ldi	r26, 0x00	; 0
 6aa:	b0 e0       	ldi	r27, 0x00	; 0
 ShaftCountRight = 0; 
 6ac:	10 92 8e 00 	sts	0x008E, r1
 6b0:	10 92 8f 00 	sts	0x008F, r1
 6b4:	10 92 90 00 	sts	0x0090, r1
 6b8:	10 92 91 00 	sts	0x0091, r1
 ShaftCountLeft = 0; 
 6bc:	10 92 92 00 	sts	0x0092, r1
 6c0:	10 92 93 00 	sts	0x0093, r1
 6c4:	10 92 94 00 	sts	0x0094, r1
 6c8:	10 92 95 00 	sts	0x0095, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
 6cc:	f1 e0       	ldi	r31, 0x01	; 1
 6ce:	c0 e0       	ldi	r28, 0x00	; 0
 6d0:	40 91 8e 00 	lds	r20, 0x008E
 6d4:	50 91 8f 00 	lds	r21, 0x008F
 6d8:	60 91 90 00 	lds	r22, 0x0090
 6dc:	70 91 91 00 	lds	r23, 0x0091
 6e0:	00 91 92 00 	lds	r16, 0x0092
 6e4:	10 91 93 00 	lds	r17, 0x0093
 6e8:	20 91 94 00 	lds	r18, 0x0094
 6ec:	30 91 95 00 	lds	r19, 0x0095
 6f0:	ef 2f       	mov	r30, r31
 6f2:	48 17       	cp	r20, r24
 6f4:	59 07       	cpc	r21, r25
 6f6:	6a 07       	cpc	r22, r26
 6f8:	7b 07       	cpc	r23, r27
 6fa:	08 f4       	brcc	.+2      	; 0x6fe <angle_rotate+0x7a>
 6fc:	ec 2f       	mov	r30, r28
 6fe:	ee 23       	and	r30, r30
 700:	49 f4       	brne	.+18     	; 0x714 <angle_rotate+0x90>
 702:	4f 2f       	mov	r20, r31
 704:	08 17       	cp	r16, r24
 706:	19 07       	cpc	r17, r25
 708:	2a 07       	cpc	r18, r26
 70a:	3b 07       	cpc	r19, r27
 70c:	08 f4       	brcc	.+2      	; 0x710 <angle_rotate+0x8c>
 70e:	4c 2f       	mov	r20, r28
 710:	44 23       	and	r20, r20
 712:	f1 f2       	breq	.-68     	; 0x6d0 <angle_rotate+0x4c>
  break;
 }
 stop(); //Stop robot
 714:	0e 94 ae 03 	call	0x75c	; 0x75c <stop>
}
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	08 95       	ret

00000720 <motion_pin_config>:


//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
	DDRB = DDRB | 0x0F;    //set direction of the PORTB3 to PORTB0 pins as output
 720:	87 b3       	in	r24, 0x17	; 23
 722:	8f 60       	ori	r24, 0x0F	; 15
 724:	87 bb       	out	0x17, r24	; 23
	PORTB = PORTB & 0xF0;  //set initial value of the PORTB3 to PORTB0 pins to logic 0
 726:	88 b3       	in	r24, 0x18	; 24
 728:	80 7f       	andi	r24, 0xF0	; 240
 72a:	88 bb       	out	0x18, r24	; 24
	DDRD = DDRD | 0x30;    //Setting PD5 and PD4 pins as output for PWM generation
 72c:	81 b3       	in	r24, 0x11	; 17
 72e:	80 63       	ori	r24, 0x30	; 48
 730:	81 bb       	out	0x11, r24	; 17
	PORTD = PORTD | 0x30;  //PD5 and PD4 pins are for velocity control using PWM
 732:	82 b3       	in	r24, 0x12	; 18
 734:	80 63       	ori	r24, 0x30	; 48
 736:	82 bb       	out	0x12, r24	; 18
}
 738:	08 95       	ret

0000073a <port_init>:

void port_init()
{
	lcd_port_config();
 73a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_port_config>
	adc_pin_config();
 73e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <adc_pin_config>
	motion_pin_config();
 742:	0e 94 90 03 	call	0x720	; 0x720 <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
 746:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
 74a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <right_encoder_pin_config>
}
 74e:	08 95       	ret

00000750 <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortBRestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
	PortBRestore = PORTB; 			// reading the PORTB's original status
 750:	98 b3       	in	r25, 0x18	; 24
	PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 752:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortBRestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 754:	8f 70       	andi	r24, 0x0F	; 15
	PortBRestore = PORTB; 			// reading the PORTB's original status
	PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
	PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 756:	98 2b       	or	r25, r24
	PORTB = PortBRestore; 			// setting the command to the port
 758:	98 bb       	out	0x18, r25	; 24
}
 75a:	08 95       	ret

0000075c <stop>:
	motion_set(0x08);
}

void stop (void)
{
	motion_set(0x00);
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	0e 94 a8 03 	call	0x750	; 0x750 <motion_set>
}
 762:	08 95       	ret

00000764 <forward>:
}


void forward (void) //both wheels forward
{
	motion_set(0x06);
 764:	86 e0       	ldi	r24, 0x06	; 6
 766:	0e 94 a8 03 	call	0x750	; 0x750 <motion_set>
}
 76a:	08 95       	ret

0000076c <back>:

void back (void) //both wheels backward
{
	motion_set(0x09);
 76c:	89 e0       	ldi	r24, 0x09	; 9
 76e:	0e 94 a8 03 	call	0x750	; 0x750 <motion_set>
}
 772:	08 95       	ret

00000774 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
 774:	85 e0       	ldi	r24, 0x05	; 5
 776:	0e 94 a8 03 	call	0x750	; 0x750 <motion_set>
}
 77a:	08 95       	ret

0000077c <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
 77c:	8a e0       	ldi	r24, 0x0A	; 10
 77e:	0e 94 a8 03 	call	0x750	; 0x750 <motion_set>
}
 782:	08 95       	ret

00000784 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
	motion_set(0x04);
 784:	84 e0       	ldi	r24, 0x04	; 4
 786:	0e 94 a8 03 	call	0x750	; 0x750 <motion_set>
}
 78a:	08 95       	ret

0000078c <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
	motion_set(0x02);
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	0e 94 a8 03 	call	0x750	; 0x750 <motion_set>
}
 792:	08 95       	ret

00000794 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
	motion_set(0x01);
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	0e 94 a8 03 	call	0x750	; 0x750 <motion_set>
}
 79a:	08 95       	ret

0000079c <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
 79c:	88 e0       	ldi	r24, 0x08	; 8
 79e:	0e 94 a8 03 	call	0x750	; 0x750 <motion_set>
}
 7a2:	08 95       	ret

000007a4 <linear_distance_mm>:


//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
 7a4:	cf 92       	push	r12
 7a6:	df 92       	push	r13
 7a8:	ef 92       	push	r14
 7aa:	ff 92       	push	r15
 7ac:	0f 93       	push	r16
 7ae:	1f 93       	push	r17
 7b0:	cf 93       	push	r28
 7b2:	df 93       	push	r29
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 12.92; // division by resolution to get shaft count
 7b4:	bc 01       	movw	r22, r24
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 40 07 	call	0xe80	; 0xe80 <__floatunsisf>
 7be:	22 e5       	ldi	r18, 0x52	; 82
 7c0:	38 eb       	ldi	r19, 0xB8	; 184
 7c2:	4e e4       	ldi	r20, 0x4E	; 78
 7c4:	51 e4       	ldi	r21, 0x41	; 65
 7c6:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
 7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fixunssfsi>
 7ce:	c6 2e       	mov	r12, r22
 7d0:	d7 2e       	mov	r13, r23
 7d2:	e8 2e       	mov	r14, r24
 7d4:	f9 2e       	mov	r15, r25
	
	ShaftCountRight = 0;
 7d6:	10 92 8e 00 	sts	0x008E, r1
 7da:	10 92 8f 00 	sts	0x008F, r1
 7de:	10 92 90 00 	sts	0x0090, r1
 7e2:	10 92 91 00 	sts	0x0091, r1
	while(1)
	{		
		readSensor();
		proportional();
		forward();
		velocity(baseLine-p,baseLine+p);
 7e6:	cb e6       	ldi	r28, 0x6B	; 107
 7e8:	d0 e0       	ldi	r29, 0x00	; 0
 7ea:	0c e7       	ldi	r16, 0x7C	; 124
 7ec:	10 e0       	ldi	r17, 0x00	; 0
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
	
	ShaftCountRight = 0;
	while(1)
	{		
		readSensor();
 7ee:	0e 94 49 00 	call	0x92	; 0x92 <readSensor>
		proportional();
 7f2:	0e 94 7c 00 	call	0xf8	; 0xf8 <proportional>
		forward();
 7f6:	0e 94 b2 03 	call	0x764	; 0x764 <forward>
		velocity(baseLine-p,baseLine+p);
 7fa:	88 81       	ld	r24, Y
 7fc:	f8 01       	movw	r30, r16
 7fe:	90 81       	ld	r25, Z
 800:	69 2f       	mov	r22, r25
 802:	68 0f       	add	r22, r24
 804:	89 1b       	sub	r24, r25
 806:	0e 94 db 02 	call	0x5b6	; 0x5b6 <velocity>
		if(ShaftCountRight > ReqdShaftCountInt)
 80a:	80 91 8e 00 	lds	r24, 0x008E
 80e:	90 91 8f 00 	lds	r25, 0x008F
 812:	a0 91 90 00 	lds	r26, 0x0090
 816:	b0 91 91 00 	lds	r27, 0x0091
 81a:	c8 16       	cp	r12, r24
 81c:	d9 06       	cpc	r13, r25
 81e:	ea 06       	cpc	r14, r26
 820:	fb 06       	cpc	r15, r27
 822:	28 f7       	brcc	.-54     	; 0x7ee <linear_distance_mm+0x4a>
		{
			break; 
		}
	}
	stop(); //Stop robot
 824:	0e 94 ae 03 	call	0x75c	; 0x75c <stop>
}
 828:	df 91       	pop	r29
 82a:	cf 91       	pop	r28
 82c:	1f 91       	pop	r17
 82e:	0f 91       	pop	r16
 830:	ff 90       	pop	r15
 832:	ef 90       	pop	r14
 834:	df 90       	pop	r13
 836:	cf 90       	pop	r12
 838:	08 95       	ret

0000083a <forward_mm>:
}

void forward_mm(unsigned int DistanceInMM)
{
	
	linear_distance_mm(DistanceInMM);
 83a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <linear_distance_mm>
}
 83e:	08 95       	ret

00000840 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{\
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	ec 01       	movw	r28, r24
	back();
 846:	0e 94 b6 03 	call	0x76c	; 0x76c <back>
	linear_distance_mm(DistanceInMM);
 84a:	ce 01       	movw	r24, r28
 84c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <linear_distance_mm>
}
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	08 95       	ret

00000856 <left_degrees>:

void left_degrees(unsigned int Degrees)
{
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
 85c:	0e 94 ba 03 	call	0x774	; 0x774 <left>
	angle_rotate(Degrees);
 860:	ce 01       	movw	r24, r28
 862:	0e 94 42 03 	call	0x684	; 0x684 <angle_rotate>
}
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	08 95       	ret

0000086c <right_degrees>:



void right_degrees(unsigned int Degrees)
{
 86c:	cf 93       	push	r28
 86e:	df 93       	push	r29
 870:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
 872:	0e 94 be 03 	call	0x77c	; 0x77c <right>
	angle_rotate(Degrees);
 876:	ce 01       	movw	r24, r28
 878:	0e 94 42 03 	call	0x684	; 0x684 <angle_rotate>
}
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	08 95       	ret

00000882 <soft_left_degrees>:


void soft_left_degrees(unsigned int Degrees)
{
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
 888:	0e 94 c2 03 	call	0x784	; 0x784 <soft_left>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
 88c:	ce 01       	movw	r24, r28
 88e:	88 0f       	add	r24, r24
 890:	99 1f       	adc	r25, r25
 892:	0e 94 42 03 	call	0x684	; 0x684 <angle_rotate>
}
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	08 95       	ret

0000089c <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
 89c:	cf 93       	push	r28
 89e:	df 93       	push	r29
 8a0:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
 8a2:	0e 94 c6 03 	call	0x78c	; 0x78c <soft_right>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
 8a6:	ce 01       	movw	r24, r28
 8a8:	88 0f       	add	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	0e 94 42 03 	call	0x684	; 0x684 <angle_rotate>
}
 8b0:	df 91       	pop	r29
 8b2:	cf 91       	pop	r28
 8b4:	08 95       	ret

000008b6 <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
 8bc:	0e 94 ca 03 	call	0x794	; 0x794 <soft_left_2>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
 8c0:	ce 01       	movw	r24, r28
 8c2:	88 0f       	add	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	0e 94 42 03 	call	0x684	; 0x684 <angle_rotate>
}
 8ca:	df 91       	pop	r29
 8cc:	cf 91       	pop	r28
 8ce:	08 95       	ret

000008d0 <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
 8d6:	0e 94 ce 03 	call	0x79c	; 0x79c <soft_right_2>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
 8da:	ce 01       	movw	r24, r28
 8dc:	88 0f       	add	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	0e 94 42 03 	call	0x684	; 0x684 <angle_rotate>
}
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	08 95       	ret

000008ea <manoeuvre>:
	int y_origin = 'D';
	
	
	
	
	int x_middle = x_F - x_origin;
 8ea:	9c 01       	movw	r18, r24
 8ec:	24 50       	subi	r18, 0x04	; 4
 8ee:	30 40       	sbci	r19, 0x00	; 0
	int y_middle = y_F - y_origin;
 8f0:	64 54       	subi	r22, 0x44	; 68
 8f2:	70 40       	sbci	r23, 0x00	; 0
	
	//For determining the final destination x-coordinate
	if( (x_middle) > 0 ){ x_D = 7; }
 8f4:	12 16       	cp	r1, r18
 8f6:	13 06       	cpc	r1, r19
 8f8:	3c f4       	brge	.+14     	; 0x908 <manoeuvre+0x1e>
 8fa:	87 e0       	ldi	r24, 0x07	; 7
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	90 93 89 00 	sts	0x0089, r25
 902:	80 93 88 00 	sts	0x0088, r24
 906:	06 c0       	rjmp	.+12     	; 0x914 <manoeuvre+0x2a>
	else { x_D = 1; }
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	90 93 89 00 	sts	0x0089, r25
 910:	80 93 88 00 	sts	0x0088, r24
	int x_intermediate = x_D - x_origin;
 914:	80 91 88 00 	lds	r24, 0x0088
 918:	90 91 89 00 	lds	r25, 0x0089
 91c:	fc 01       	movw	r30, r24
 91e:	34 97       	sbiw	r30, 0x04	; 4
	
	//For determining the final destination y-coordinate	
	if((y_middle) > 0){ y_D = 'F'; }	
 920:	16 16       	cp	r1, r22
 922:	17 06       	cpc	r1, r23
 924:	3c f4       	brge	.+14     	; 0x934 <manoeuvre+0x4a>
 926:	86 e4       	ldi	r24, 0x46	; 70
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	90 93 87 00 	sts	0x0087, r25
 92e:	80 93 86 00 	sts	0x0086, r24
 932:	10 c0       	rjmp	.+32     	; 0x954 <manoeuvre+0x6a>
	else if((y_middle) == 0){ y_D = 'D'; }
 934:	61 15       	cp	r22, r1
 936:	71 05       	cpc	r23, r1
 938:	39 f4       	brne	.+14     	; 0x948 <manoeuvre+0x5e>
 93a:	84 e4       	ldi	r24, 0x44	; 68
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	90 93 87 00 	sts	0x0087, r25
 942:	80 93 86 00 	sts	0x0086, r24
 946:	06 c0       	rjmp	.+12     	; 0x954 <manoeuvre+0x6a>
	else { y_D = 'B'; } 
 948:	82 e4       	ldi	r24, 0x42	; 66
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	90 93 87 00 	sts	0x0087, r25
 950:	80 93 86 00 	sts	0x0086, r24
	int y_intermediate = y_D - y_origin;	
 954:	80 91 86 00 	lds	r24, 0x0086
 958:	90 91 87 00 	lds	r25, 0x0087
 95c:	84 54       	subi	r24, 0x44	; 68
 95e:	90 40       	sbci	r25, 0x00	; 0
	
	//How much to manoeuvre
	vertical = 	x_middle - x_intermediate;
 960:	2e 1b       	sub	r18, r30
 962:	3f 0b       	sbc	r19, r31
 964:	30 93 8d 00 	sts	0x008D, r19
 968:	20 93 8c 00 	sts	0x008C, r18
	horizontal = y_middle - y_intermediate;
 96c:	68 1b       	sub	r22, r24
 96e:	79 0b       	sbc	r23, r25
 970:	70 93 8b 00 	sts	0x008B, r23
 974:	60 93 8a 00 	sts	0x008A, r22
	direction = dir_F;	
 978:	40 93 a1 00 	sts	0x00A1, r20
}
 97c:	08 95       	ret

0000097e <print_value>:

void print_value()
{
	lcd_set_4bit();
 97e:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_set_4bit>
	lcd_cursor(1, 3);
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	63 e0       	ldi	r22, 0x03	; 3
 986:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_cursor>
	lcd_string("Vert");	
 98a:	80 e6       	ldi	r24, 0x60	; 96
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_string>
	lcd_print(1,8, vertical, 3);
 992:	40 91 8c 00 	lds	r20, 0x008C
 996:	50 91 8d 00 	lds	r21, 0x008D
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	68 e0       	ldi	r22, 0x08	; 8
 99e:	23 e0       	ldi	r18, 0x03	; 3
 9a0:	30 e0       	ldi	r19, 0x00	; 0
 9a2:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_print>
	lcd_cursor(2, 1);
 9a6:	82 e0       	ldi	r24, 0x02	; 2
 9a8:	61 e0       	ldi	r22, 0x01	; 1
 9aa:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_cursor>
	lcd_string("horiz");
 9ae:	85 e6       	ldi	r24, 0x65	; 101
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	0e 94 97 01 	call	0x32e	; 0x32e <lcd_string>
	lcd_print(2,8, horizontal, 3);
 9b6:	40 91 8a 00 	lds	r20, 0x008A
 9ba:	50 91 8b 00 	lds	r21, 0x008B
 9be:	82 e0       	ldi	r24, 0x02	; 2
 9c0:	68 e0       	ldi	r22, 0x08	; 8
 9c2:	23 e0       	ldi	r18, 0x03	; 3
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_print>
}
 9ca:	08 95       	ret

000009cc <rotate>:

void rotate(char face){
	switch(direction){
 9cc:	90 91 a1 00 	lds	r25, 0x00A1
 9d0:	9e 34       	cpi	r25, 0x4E	; 78
 9d2:	61 f0       	breq	.+24     	; 0x9ec <rotate+0x20>
 9d4:	9f 34       	cpi	r25, 0x4F	; 79
 9d6:	20 f4       	brcc	.+8      	; 0x9e0 <rotate+0x14>
 9d8:	95 34       	cpi	r25, 0x45	; 69
 9da:	09 f0       	breq	.+2      	; 0x9de <rotate+0x12>
 9dc:	5b c0       	rjmp	.+182    	; 0xa94 <rotate+0xc8>
 9de:	46 c0       	rjmp	.+140    	; 0xa6c <rotate+0xa0>
 9e0:	93 35       	cpi	r25, 0x53	; 83
 9e2:	79 f1       	breq	.+94     	; 0xa42 <rotate+0x76>
 9e4:	97 35       	cpi	r25, 0x57	; 87
 9e6:	09 f0       	breq	.+2      	; 0x9ea <rotate+0x1e>
 9e8:	55 c0       	rjmp	.+170    	; 0xa94 <rotate+0xc8>
 9ea:	16 c0       	rjmp	.+44     	; 0xa18 <rotate+0x4c>
		case 'N':{
			if(face == 'S'){right_degrees(180);}
 9ec:	83 35       	cpi	r24, 0x53	; 83
 9ee:	29 f4       	brne	.+10     	; 0x9fa <rotate+0x2e>
 9f0:	84 eb       	ldi	r24, 0xB4	; 180
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 36 04 	call	0x86c	; 0x86c <right_degrees>
 9f8:	08 95       	ret
			else if(face == 'E'){right_degrees(90);}
 9fa:	85 34       	cpi	r24, 0x45	; 69
 9fc:	29 f4       	brne	.+10     	; 0xa08 <rotate+0x3c>
 9fe:	8a e5       	ldi	r24, 0x5A	; 90
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 36 04 	call	0x86c	; 0x86c <right_degrees>
 a06:	08 95       	ret
			else if(face == 'W'){left_degrees(90);}
 a08:	87 35       	cpi	r24, 0x57	; 87
 a0a:	09 f0       	breq	.+2      	; 0xa0e <rotate+0x42>
 a0c:	43 c0       	rjmp	.+134    	; 0xa94 <rotate+0xc8>
 a0e:	8a e5       	ldi	r24, 0x5A	; 90
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	0e 94 2b 04 	call	0x856	; 0x856 <left_degrees>
 a16:	08 95       	ret
				break;
		}
		case 'W':{
			if(face == 'S'){left_degrees(90);}
 a18:	83 35       	cpi	r24, 0x53	; 83
 a1a:	29 f4       	brne	.+10     	; 0xa26 <rotate+0x5a>
 a1c:	8a e5       	ldi	r24, 0x5A	; 90
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	0e 94 2b 04 	call	0x856	; 0x856 <left_degrees>
 a24:	08 95       	ret
			else if(face == 'E'){right_degrees(180);}
 a26:	85 34       	cpi	r24, 0x45	; 69
 a28:	29 f4       	brne	.+10     	; 0xa34 <rotate+0x68>
 a2a:	84 eb       	ldi	r24, 0xB4	; 180
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	0e 94 36 04 	call	0x86c	; 0x86c <right_degrees>
 a32:	08 95       	ret
			else if(face == 'N'){right_degrees(90);}
 a34:	8e 34       	cpi	r24, 0x4E	; 78
 a36:	71 f5       	brne	.+92     	; 0xa94 <rotate+0xc8>
 a38:	8a e5       	ldi	r24, 0x5A	; 90
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 94 36 04 	call	0x86c	; 0x86c <right_degrees>
 a40:	08 95       	ret
				break;
		}
		case 'S':{
			if(face == 'N'){right_degrees(180);}
 a42:	8e 34       	cpi	r24, 0x4E	; 78
 a44:	29 f4       	brne	.+10     	; 0xa50 <rotate+0x84>
 a46:	84 eb       	ldi	r24, 0xB4	; 180
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 36 04 	call	0x86c	; 0x86c <right_degrees>
 a4e:	08 95       	ret
			else if(face == 'W'){right_degrees(90);}
 a50:	87 35       	cpi	r24, 0x57	; 87
 a52:	29 f4       	brne	.+10     	; 0xa5e <rotate+0x92>
 a54:	8a e5       	ldi	r24, 0x5A	; 90
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 36 04 	call	0x86c	; 0x86c <right_degrees>
 a5c:	08 95       	ret
			else if(face == 'E'){left_degrees(90);}
 a5e:	85 34       	cpi	r24, 0x45	; 69
 a60:	c9 f4       	brne	.+50     	; 0xa94 <rotate+0xc8>
 a62:	8a e5       	ldi	r24, 0x5A	; 90
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 94 2b 04 	call	0x856	; 0x856 <left_degrees>
 a6a:	08 95       	ret
				break;
		}
		case 'E':{
			if(face == 'W'){right_degrees(180);}
 a6c:	87 35       	cpi	r24, 0x57	; 87
 a6e:	29 f4       	brne	.+10     	; 0xa7a <rotate+0xae>
 a70:	84 eb       	ldi	r24, 0xB4	; 180
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	0e 94 36 04 	call	0x86c	; 0x86c <right_degrees>
 a78:	08 95       	ret
			else if(face == 'S'){right_degrees(90);}
 a7a:	83 35       	cpi	r24, 0x53	; 83
 a7c:	29 f4       	brne	.+10     	; 0xa88 <rotate+0xbc>
 a7e:	8a e5       	ldi	r24, 0x5A	; 90
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 36 04 	call	0x86c	; 0x86c <right_degrees>
 a86:	08 95       	ret
			else if(face == 'N'){left_degrees(90);}
 a88:	8e 34       	cpi	r24, 0x4E	; 78
 a8a:	21 f4       	brne	.+8      	; 0xa94 <rotate+0xc8>
 a8c:	8a e5       	ldi	r24, 0x5A	; 90
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0e 94 2b 04 	call	0x856	; 0x856 <left_degrees>
 a94:	08 95       	ret

00000a96 <vertical_motion>:
	}
}

void vertical_motion(){
	
	if(vertical < 0){ 
 a96:	80 91 8c 00 	lds	r24, 0x008C
 a9a:	90 91 8d 00 	lds	r25, 0x008D
 a9e:	99 23       	and	r25, r25
 aa0:	24 f4       	brge	.+8      	; 0xaaa <vertical_motion+0x14>
		face = 'S';
 aa2:	83 e5       	ldi	r24, 0x53	; 83
 aa4:	80 93 99 00 	sts	0x0099, r24
 aa8:	03 c0       	rjmp	.+6      	; 0xab0 <vertical_motion+0x1a>
	}
	else{
		face = 'N';
 aaa:	8e e4       	ldi	r24, 0x4E	; 78
 aac:	80 93 99 00 	sts	0x0099, r24
	}
	rotate(face);
 ab0:	80 91 99 00 	lds	r24, 0x0099
 ab4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <rotate>
	direction = face;	
 ab8:	80 91 99 00 	lds	r24, 0x0099
 abc:	80 93 a1 00 	sts	0x00A1, r24
	vertical = abs(vertical);
 ac0:	20 91 8c 00 	lds	r18, 0x008C
 ac4:	30 91 8d 00 	lds	r19, 0x008D
 ac8:	33 23       	and	r19, r19
 aca:	1c f4       	brge	.+6      	; 0xad2 <vertical_motion+0x3c>
 acc:	30 95       	com	r19
 ace:	21 95       	neg	r18
 ad0:	3f 4f       	sbci	r19, 0xFF	; 255
 ad2:	30 93 8d 00 	sts	0x008D, r19
 ad6:	20 93 8c 00 	sts	0x008C, r18
	//lcd_print(1,3, vertical, 3);
	forward_mm(vertical * 340);
 ada:	84 e5       	ldi	r24, 0x54	; 84
 adc:	91 e0       	ldi	r25, 0x01	; 1
 ade:	ac 01       	movw	r20, r24
 ae0:	24 9f       	mul	r18, r20
 ae2:	c0 01       	movw	r24, r0
 ae4:	25 9f       	mul	r18, r21
 ae6:	90 0d       	add	r25, r0
 ae8:	34 9f       	mul	r19, r20
 aea:	90 0d       	add	r25, r0
 aec:	11 24       	eor	r1, r1
 aee:	0e 94 1d 04 	call	0x83a	; 0x83a <forward_mm>
}
 af2:	08 95       	ret

00000af4 <horizontal_motion>:
void horizontal_motion(){
	
	if(horizontal < 0){ 
 af4:	80 91 8a 00 	lds	r24, 0x008A
 af8:	90 91 8b 00 	lds	r25, 0x008B
 afc:	99 23       	and	r25, r25
 afe:	24 f4       	brge	.+8      	; 0xb08 <horizontal_motion+0x14>
		face = 'E';
 b00:	85 e4       	ldi	r24, 0x45	; 69
 b02:	80 93 99 00 	sts	0x0099, r24
 b06:	03 c0       	rjmp	.+6      	; 0xb0e <horizontal_motion+0x1a>
	}
	else{
		face = 'W';
 b08:	87 e5       	ldi	r24, 0x57	; 87
 b0a:	80 93 99 00 	sts	0x0099, r24
	}
	rotate(face);
 b0e:	80 91 99 00 	lds	r24, 0x0099
 b12:	0e 94 e6 04 	call	0x9cc	; 0x9cc <rotate>
	direction = face;
 b16:	80 91 99 00 	lds	r24, 0x0099
 b1a:	80 93 a1 00 	sts	0x00A1, r24
	horizontal = abs(horizontal);
 b1e:	20 91 8a 00 	lds	r18, 0x008A
 b22:	30 91 8b 00 	lds	r19, 0x008B
 b26:	33 23       	and	r19, r19
 b28:	1c f4       	brge	.+6      	; 0xb30 <horizontal_motion+0x3c>
 b2a:	30 95       	com	r19
 b2c:	21 95       	neg	r18
 b2e:	3f 4f       	sbci	r19, 0xFF	; 255
 b30:	30 93 8b 00 	sts	0x008B, r19
 b34:	20 93 8a 00 	sts	0x008A, r18
	forward_mm(horizontal * 340);
 b38:	84 e5       	ldi	r24, 0x54	; 84
 b3a:	91 e0       	ldi	r25, 0x01	; 1
 b3c:	ac 01       	movw	r20, r24
 b3e:	24 9f       	mul	r18, r20
 b40:	c0 01       	movw	r24, r0
 b42:	25 9f       	mul	r18, r21
 b44:	90 0d       	add	r25, r0
 b46:	34 9f       	mul	r19, r20
 b48:	90 0d       	add	r25, r0
 b4a:	11 24       	eor	r1, r1
 b4c:	0e 94 1d 04 	call	0x83a	; 0x83a <forward_mm>
}
 b50:	08 95       	ret

00000b52 <navigate>:


void navigate(int nodes){
 b52:	cf 92       	push	r12
 b54:	df 92       	push	r13
 b56:	ef 92       	push	r14
 b58:	ff 92       	push	r15
 b5a:	0f 93       	push	r16
 b5c:	1f 93       	push	r17
 b5e:	cf 93       	push	r28
 b60:	df 93       	push	r29
			face = 'N';
			x_D = 7;
		}
		rotate(face);
		direction = face;
		forward_mm((nodes-1) * 340);
 b62:	9c 01       	movw	r18, r24
 b64:	21 50       	subi	r18, 0x01	; 1
 b66:	30 40       	sbci	r19, 0x00	; 0
 b68:	84 e5       	ldi	r24, 0x54	; 84
 b6a:	91 e0       	ldi	r25, 0x01	; 1
 b6c:	28 9f       	mul	r18, r24
 b6e:	80 01       	movw	r16, r0
 b70:	29 9f       	mul	r18, r25
 b72:	10 0d       	add	r17, r0
 b74:	38 9f       	mul	r19, r24
 b76:	10 0d       	add	r17, r0
 b78:	11 24       	eor	r1, r1
 b7a:	c2 e0       	ldi	r28, 0x02	; 2
 b7c:	d0 e0       	ldi	r29, 0x00	; 0
		if(x_D == 1){
			face = 'S';
			x_D = 7; 
		}
		else if(x_D == 7){
			face = 'N';
 b7e:	0f 2e       	mov	r0, r31
 b80:	fe e4       	ldi	r31, 0x4E	; 78
 b82:	cf 2e       	mov	r12, r31
 b84:	f0 2d       	mov	r31, r0
			x_D = 7;
 b86:	0f 2e       	mov	r0, r31
 b88:	f7 e0       	ldi	r31, 0x07	; 7
 b8a:	ef 2e       	mov	r14, r31
 b8c:	ff 24       	eor	r15, r15
 b8e:	f0 2d       	mov	r31, r0


void navigate(int nodes){
	for(int i=0;i<2;i++){	
		if(x_D == 1){
			face = 'S';
 b90:	0f 2e       	mov	r0, r31
 b92:	f3 e5       	ldi	r31, 0x53	; 83
 b94:	df 2e       	mov	r13, r31
 b96:	f0 2d       	mov	r31, r0
}


void navigate(int nodes){
	for(int i=0;i<2;i++){	
		if(x_D == 1){
 b98:	80 91 88 00 	lds	r24, 0x0088
 b9c:	90 91 89 00 	lds	r25, 0x0089
 ba0:	81 30       	cpi	r24, 0x01	; 1
 ba2:	91 05       	cpc	r25, r1
 ba4:	39 f4       	brne	.+14     	; 0xbb4 <navigate+0x62>
			face = 'S';
 ba6:	d0 92 99 00 	sts	0x0099, r13
			x_D = 7; 
 baa:	f0 92 89 00 	sts	0x0089, r15
 bae:	e0 92 88 00 	sts	0x0088, r14
 bb2:	09 c0       	rjmp	.+18     	; 0xbc6 <navigate+0x74>
		}
		else if(x_D == 7){
 bb4:	87 30       	cpi	r24, 0x07	; 7
 bb6:	91 05       	cpc	r25, r1
 bb8:	31 f4       	brne	.+12     	; 0xbc6 <navigate+0x74>
			face = 'N';
 bba:	c0 92 99 00 	sts	0x0099, r12
			x_D = 7;
 bbe:	f0 92 89 00 	sts	0x0089, r15
 bc2:	e0 92 88 00 	sts	0x0088, r14
		}
		rotate(face);
 bc6:	80 91 99 00 	lds	r24, 0x0099
 bca:	0e 94 e6 04 	call	0x9cc	; 0x9cc <rotate>
		direction = face;
 bce:	80 91 99 00 	lds	r24, 0x0099
 bd2:	80 93 a1 00 	sts	0x00A1, r24
		forward_mm((nodes-1) * 340);
 bd6:	c8 01       	movw	r24, r16
 bd8:	0e 94 1d 04 	call	0x83a	; 0x83a <forward_mm>
 bdc:	21 97       	sbiw	r28, 0x01	; 1
	forward_mm(horizontal * 340);
}


void navigate(int nodes){
	for(int i=0;i<2;i++){	
 bde:	e1 f6       	brne	.-72     	; 0xb98 <navigate+0x46>
	
	/*buzzer_on();
	_delay_ms(1000);
	buzzer_off();*/
			
}
 be0:	df 91       	pop	r29
 be2:	cf 91       	pop	r28
 be4:	1f 91       	pop	r17
 be6:	0f 91       	pop	r16
 be8:	ff 90       	pop	r15
 bea:	ef 90       	pop	r14
 bec:	df 90       	pop	r13
 bee:	cf 90       	pop	r12
 bf0:	08 95       	ret

00000bf2 <init_devices>:

void init_devices (void)
{
	cli(); //Clears the global interrupts
 bf2:	f8 94       	cli
	port_init();
 bf4:	0e 94 9d 03 	call	0x73a	; 0x73a <port_init>
	adc_init();
 bf8:	0e 94 6d 02 	call	0x4da	; 0x4da <adc_init>
	timer1_init();
 bfc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <timer1_init>
	left_position_encoder_interrupt_init();
 c00:	0e 94 e6 02 	call	0x5cc	; 0x5cc <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
 c04:	0e 94 ef 02 	call	0x5de	; 0x5de <right_position_encoder_interrupt_init>
	sei();   //Enables the global interrupts
 c08:	78 94       	sei
}
 c0a:	08 95       	ret

00000c0c <main>:


int main(void)
{
	//lcd_port_config();
	init_devices();
 c0c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <init_devices>
	lcd_set_4bit();	
 c10:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_set_4bit>
	lcd_init();	
 c14:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_init>
		_delay_ms(1000);		//delay
		buzzer_off();*/
		
		
		//This function will set the nodes to travel in the vertical & horizontal direction for the bot to reach its standard spot
		manoeuvre(x_F, y_F, dir_F);	
 c18:	83 e0       	ldi	r24, 0x03	; 3
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	63 e4       	ldi	r22, 0x43	; 67
 c1e:	70 e0       	ldi	r23, 0x00	; 0
 c20:	45 e4       	ldi	r20, 0x45	; 69
 c22:	0e 94 75 04 	call	0x8ea	; 0x8ea <manoeuvre>
		
		print_value();
 c26:	0e 94 bf 04 	call	0x97e	; 0x97e <print_value>
 c2a:	8f e3       	ldi	r24, 0x3F	; 63
 c2c:	92 e4       	ldi	r25, 0x42	; 66
 c2e:	af e0       	ldi	r26, 0x0F	; 15
 c30:	81 50       	subi	r24, 0x01	; 1
 c32:	90 40       	sbci	r25, 0x00	; 0
 c34:	a0 40       	sbci	r26, 0x00	; 0
 c36:	e1 f7       	brne	.-8      	; 0xc30 <main+0x24>
 c38:	00 c0       	rjmp	.+0      	; 0xc3a <main+0x2e>
 c3a:	00 00       	nop
		_delay_ms(5000);
		
		
		lcd_wr_command(0x01);
 c3c:	81 e0       	ldi	r24, 0x01	; 1
 c3e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
		//_delay_ms(1000);
		
				
		vertical_motion();
 c42:	0e 94 4b 05 	call	0xa96	; 0xa96 <vertical_motion>
		stop();
 c46:	0e 94 ae 03 	call	0x75c	; 0x75c <stop>
 c4a:	8f e9       	ldi	r24, 0x9F	; 159
 c4c:	96 e8       	ldi	r25, 0x86	; 134
 c4e:	a1 e0       	ldi	r26, 0x01	; 1
 c50:	81 50       	subi	r24, 0x01	; 1
 c52:	90 40       	sbci	r25, 0x00	; 0
 c54:	a0 40       	sbci	r26, 0x00	; 0
 c56:	e1 f7       	brne	.-8      	; 0xc50 <main+0x44>
 c58:	00 c0       	rjmp	.+0      	; 0xc5a <main+0x4e>
 c5a:	00 00       	nop
		_delay_ms(500);
		horizontal_motion();
 c5c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <horizontal_motion>
 c60:	8f e9       	ldi	r24, 0x9F	; 159
 c62:	96 e8       	ldi	r25, 0x86	; 134
 c64:	a1 e0       	ldi	r26, 0x01	; 1
 c66:	81 50       	subi	r24, 0x01	; 1
 c68:	90 40       	sbci	r25, 0x00	; 0
 c6a:	a0 40       	sbci	r26, 0x00	; 0
 c6c:	e1 f7       	brne	.-8      	; 0xc66 <main+0x5a>
 c6e:	00 c0       	rjmp	.+0      	; 0xc70 <main+0x64>
 c70:	00 00       	nop
		_delay_ms(500);
		//right_degrees(180);
		//_delay_ms(500);
		
		
		navigate(STOPS);	
 c72:	87 e0       	ldi	r24, 0x07	; 7
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	0e 94 a9 05 	call	0xb52	; 0xb52 <navigate>
		stop();
 c7a:	0e 94 ae 03 	call	0x75c	; 0x75c <stop>
		
		
 c7e:	80 e0       	ldi	r24, 0x00	; 0
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	08 95       	ret

00000c84 <__subsf3>:
 c84:	50 58       	subi	r21, 0x80	; 128

00000c86 <__addsf3>:
 c86:	bb 27       	eor	r27, r27
 c88:	aa 27       	eor	r26, r26
 c8a:	0e d0       	rcall	.+28     	; 0xca8 <__addsf3x>
 c8c:	4d c1       	rjmp	.+666    	; 0xf28 <__fp_round>
 c8e:	3e d1       	rcall	.+636    	; 0xf0c <__fp_pscA>
 c90:	30 f0       	brcs	.+12     	; 0xc9e <__addsf3+0x18>
 c92:	43 d1       	rcall	.+646    	; 0xf1a <__fp_pscB>
 c94:	20 f0       	brcs	.+8      	; 0xc9e <__addsf3+0x18>
 c96:	31 f4       	brne	.+12     	; 0xca4 <__addsf3+0x1e>
 c98:	9f 3f       	cpi	r25, 0xFF	; 255
 c9a:	11 f4       	brne	.+4      	; 0xca0 <__addsf3+0x1a>
 c9c:	1e f4       	brtc	.+6      	; 0xca4 <__addsf3+0x1e>
 c9e:	33 c1       	rjmp	.+614    	; 0xf06 <__fp_nan>
 ca0:	0e f4       	brtc	.+2      	; 0xca4 <__addsf3+0x1e>
 ca2:	e0 95       	com	r30
 ca4:	e7 fb       	bst	r30, 7
 ca6:	29 c1       	rjmp	.+594    	; 0xefa <__fp_inf>

00000ca8 <__addsf3x>:
 ca8:	e9 2f       	mov	r30, r25
 caa:	4f d1       	rcall	.+670    	; 0xf4a <__fp_split3>
 cac:	80 f3       	brcs	.-32     	; 0xc8e <__addsf3+0x8>
 cae:	ba 17       	cp	r27, r26
 cb0:	62 07       	cpc	r22, r18
 cb2:	73 07       	cpc	r23, r19
 cb4:	84 07       	cpc	r24, r20
 cb6:	95 07       	cpc	r25, r21
 cb8:	18 f0       	brcs	.+6      	; 0xcc0 <__addsf3x+0x18>
 cba:	71 f4       	brne	.+28     	; 0xcd8 <__addsf3x+0x30>
 cbc:	9e f5       	brtc	.+102    	; 0xd24 <__addsf3x+0x7c>
 cbe:	67 c1       	rjmp	.+718    	; 0xf8e <__fp_zero>
 cc0:	0e f4       	brtc	.+2      	; 0xcc4 <__addsf3x+0x1c>
 cc2:	e0 95       	com	r30
 cc4:	0b 2e       	mov	r0, r27
 cc6:	ba 2f       	mov	r27, r26
 cc8:	a0 2d       	mov	r26, r0
 cca:	0b 01       	movw	r0, r22
 ccc:	b9 01       	movw	r22, r18
 cce:	90 01       	movw	r18, r0
 cd0:	0c 01       	movw	r0, r24
 cd2:	ca 01       	movw	r24, r20
 cd4:	a0 01       	movw	r20, r0
 cd6:	11 24       	eor	r1, r1
 cd8:	ff 27       	eor	r31, r31
 cda:	59 1b       	sub	r21, r25
 cdc:	99 f0       	breq	.+38     	; 0xd04 <__addsf3x+0x5c>
 cde:	59 3f       	cpi	r21, 0xF9	; 249
 ce0:	50 f4       	brcc	.+20     	; 0xcf6 <__addsf3x+0x4e>
 ce2:	50 3e       	cpi	r21, 0xE0	; 224
 ce4:	68 f1       	brcs	.+90     	; 0xd40 <__addsf3x+0x98>
 ce6:	1a 16       	cp	r1, r26
 ce8:	f0 40       	sbci	r31, 0x00	; 0
 cea:	a2 2f       	mov	r26, r18
 cec:	23 2f       	mov	r18, r19
 cee:	34 2f       	mov	r19, r20
 cf0:	44 27       	eor	r20, r20
 cf2:	58 5f       	subi	r21, 0xF8	; 248
 cf4:	f3 cf       	rjmp	.-26     	; 0xcdc <__addsf3x+0x34>
 cf6:	46 95       	lsr	r20
 cf8:	37 95       	ror	r19
 cfa:	27 95       	ror	r18
 cfc:	a7 95       	ror	r26
 cfe:	f0 40       	sbci	r31, 0x00	; 0
 d00:	53 95       	inc	r21
 d02:	c9 f7       	brne	.-14     	; 0xcf6 <__addsf3x+0x4e>
 d04:	7e f4       	brtc	.+30     	; 0xd24 <__addsf3x+0x7c>
 d06:	1f 16       	cp	r1, r31
 d08:	ba 0b       	sbc	r27, r26
 d0a:	62 0b       	sbc	r22, r18
 d0c:	73 0b       	sbc	r23, r19
 d0e:	84 0b       	sbc	r24, r20
 d10:	ba f0       	brmi	.+46     	; 0xd40 <__addsf3x+0x98>
 d12:	91 50       	subi	r25, 0x01	; 1
 d14:	a1 f0       	breq	.+40     	; 0xd3e <__addsf3x+0x96>
 d16:	ff 0f       	add	r31, r31
 d18:	bb 1f       	adc	r27, r27
 d1a:	66 1f       	adc	r22, r22
 d1c:	77 1f       	adc	r23, r23
 d1e:	88 1f       	adc	r24, r24
 d20:	c2 f7       	brpl	.-16     	; 0xd12 <__addsf3x+0x6a>
 d22:	0e c0       	rjmp	.+28     	; 0xd40 <__addsf3x+0x98>
 d24:	ba 0f       	add	r27, r26
 d26:	62 1f       	adc	r22, r18
 d28:	73 1f       	adc	r23, r19
 d2a:	84 1f       	adc	r24, r20
 d2c:	48 f4       	brcc	.+18     	; 0xd40 <__addsf3x+0x98>
 d2e:	87 95       	ror	r24
 d30:	77 95       	ror	r23
 d32:	67 95       	ror	r22
 d34:	b7 95       	ror	r27
 d36:	f7 95       	ror	r31
 d38:	9e 3f       	cpi	r25, 0xFE	; 254
 d3a:	08 f0       	brcs	.+2      	; 0xd3e <__addsf3x+0x96>
 d3c:	b3 cf       	rjmp	.-154    	; 0xca4 <__addsf3+0x1e>
 d3e:	93 95       	inc	r25
 d40:	88 0f       	add	r24, r24
 d42:	08 f0       	brcs	.+2      	; 0xd46 <__addsf3x+0x9e>
 d44:	99 27       	eor	r25, r25
 d46:	ee 0f       	add	r30, r30
 d48:	97 95       	ror	r25
 d4a:	87 95       	ror	r24
 d4c:	08 95       	ret

00000d4e <__divsf3>:
 d4e:	0c d0       	rcall	.+24     	; 0xd68 <__divsf3x>
 d50:	eb c0       	rjmp	.+470    	; 0xf28 <__fp_round>
 d52:	e3 d0       	rcall	.+454    	; 0xf1a <__fp_pscB>
 d54:	40 f0       	brcs	.+16     	; 0xd66 <__divsf3+0x18>
 d56:	da d0       	rcall	.+436    	; 0xf0c <__fp_pscA>
 d58:	30 f0       	brcs	.+12     	; 0xd66 <__divsf3+0x18>
 d5a:	21 f4       	brne	.+8      	; 0xd64 <__divsf3+0x16>
 d5c:	5f 3f       	cpi	r21, 0xFF	; 255
 d5e:	19 f0       	breq	.+6      	; 0xd66 <__divsf3+0x18>
 d60:	cc c0       	rjmp	.+408    	; 0xefa <__fp_inf>
 d62:	51 11       	cpse	r21, r1
 d64:	15 c1       	rjmp	.+554    	; 0xf90 <__fp_szero>
 d66:	cf c0       	rjmp	.+414    	; 0xf06 <__fp_nan>

00000d68 <__divsf3x>:
 d68:	f0 d0       	rcall	.+480    	; 0xf4a <__fp_split3>
 d6a:	98 f3       	brcs	.-26     	; 0xd52 <__divsf3+0x4>

00000d6c <__divsf3_pse>:
 d6c:	99 23       	and	r25, r25
 d6e:	c9 f3       	breq	.-14     	; 0xd62 <__divsf3+0x14>
 d70:	55 23       	and	r21, r21
 d72:	b1 f3       	breq	.-20     	; 0xd60 <__divsf3+0x12>
 d74:	95 1b       	sub	r25, r21
 d76:	55 0b       	sbc	r21, r21
 d78:	bb 27       	eor	r27, r27
 d7a:	aa 27       	eor	r26, r26
 d7c:	62 17       	cp	r22, r18
 d7e:	73 07       	cpc	r23, r19
 d80:	84 07       	cpc	r24, r20
 d82:	38 f0       	brcs	.+14     	; 0xd92 <__divsf3_pse+0x26>
 d84:	9f 5f       	subi	r25, 0xFF	; 255
 d86:	5f 4f       	sbci	r21, 0xFF	; 255
 d88:	22 0f       	add	r18, r18
 d8a:	33 1f       	adc	r19, r19
 d8c:	44 1f       	adc	r20, r20
 d8e:	aa 1f       	adc	r26, r26
 d90:	a9 f3       	breq	.-22     	; 0xd7c <__divsf3_pse+0x10>
 d92:	33 d0       	rcall	.+102    	; 0xdfa <__divsf3_pse+0x8e>
 d94:	0e 2e       	mov	r0, r30
 d96:	3a f0       	brmi	.+14     	; 0xda6 <__divsf3_pse+0x3a>
 d98:	e0 e8       	ldi	r30, 0x80	; 128
 d9a:	30 d0       	rcall	.+96     	; 0xdfc <__divsf3_pse+0x90>
 d9c:	91 50       	subi	r25, 0x01	; 1
 d9e:	50 40       	sbci	r21, 0x00	; 0
 da0:	e6 95       	lsr	r30
 da2:	00 1c       	adc	r0, r0
 da4:	ca f7       	brpl	.-14     	; 0xd98 <__divsf3_pse+0x2c>
 da6:	29 d0       	rcall	.+82     	; 0xdfa <__divsf3_pse+0x8e>
 da8:	fe 2f       	mov	r31, r30
 daa:	27 d0       	rcall	.+78     	; 0xdfa <__divsf3_pse+0x8e>
 dac:	66 0f       	add	r22, r22
 dae:	77 1f       	adc	r23, r23
 db0:	88 1f       	adc	r24, r24
 db2:	bb 1f       	adc	r27, r27
 db4:	26 17       	cp	r18, r22
 db6:	37 07       	cpc	r19, r23
 db8:	48 07       	cpc	r20, r24
 dba:	ab 07       	cpc	r26, r27
 dbc:	b0 e8       	ldi	r27, 0x80	; 128
 dbe:	09 f0       	breq	.+2      	; 0xdc2 <__divsf3_pse+0x56>
 dc0:	bb 0b       	sbc	r27, r27
 dc2:	80 2d       	mov	r24, r0
 dc4:	bf 01       	movw	r22, r30
 dc6:	ff 27       	eor	r31, r31
 dc8:	93 58       	subi	r25, 0x83	; 131
 dca:	5f 4f       	sbci	r21, 0xFF	; 255
 dcc:	2a f0       	brmi	.+10     	; 0xdd8 <__divsf3_pse+0x6c>
 dce:	9e 3f       	cpi	r25, 0xFE	; 254
 dd0:	51 05       	cpc	r21, r1
 dd2:	68 f0       	brcs	.+26     	; 0xdee <__divsf3_pse+0x82>
 dd4:	92 c0       	rjmp	.+292    	; 0xefa <__fp_inf>
 dd6:	dc c0       	rjmp	.+440    	; 0xf90 <__fp_szero>
 dd8:	5f 3f       	cpi	r21, 0xFF	; 255
 dda:	ec f3       	brlt	.-6      	; 0xdd6 <__divsf3_pse+0x6a>
 ddc:	98 3e       	cpi	r25, 0xE8	; 232
 dde:	dc f3       	brlt	.-10     	; 0xdd6 <__divsf3_pse+0x6a>
 de0:	86 95       	lsr	r24
 de2:	77 95       	ror	r23
 de4:	67 95       	ror	r22
 de6:	b7 95       	ror	r27
 de8:	f7 95       	ror	r31
 dea:	9f 5f       	subi	r25, 0xFF	; 255
 dec:	c9 f7       	brne	.-14     	; 0xde0 <__divsf3_pse+0x74>
 dee:	88 0f       	add	r24, r24
 df0:	91 1d       	adc	r25, r1
 df2:	96 95       	lsr	r25
 df4:	87 95       	ror	r24
 df6:	97 f9       	bld	r25, 7
 df8:	08 95       	ret
 dfa:	e1 e0       	ldi	r30, 0x01	; 1
 dfc:	66 0f       	add	r22, r22
 dfe:	77 1f       	adc	r23, r23
 e00:	88 1f       	adc	r24, r24
 e02:	bb 1f       	adc	r27, r27
 e04:	62 17       	cp	r22, r18
 e06:	73 07       	cpc	r23, r19
 e08:	84 07       	cpc	r24, r20
 e0a:	ba 07       	cpc	r27, r26
 e0c:	20 f0       	brcs	.+8      	; 0xe16 <__divsf3_pse+0xaa>
 e0e:	62 1b       	sub	r22, r18
 e10:	73 0b       	sbc	r23, r19
 e12:	84 0b       	sbc	r24, r20
 e14:	ba 0b       	sbc	r27, r26
 e16:	ee 1f       	adc	r30, r30
 e18:	88 f7       	brcc	.-30     	; 0xdfc <__divsf3_pse+0x90>
 e1a:	e0 95       	com	r30
 e1c:	08 95       	ret

00000e1e <__fixsfsi>:
 e1e:	04 d0       	rcall	.+8      	; 0xe28 <__fixunssfsi>
 e20:	68 94       	set
 e22:	b1 11       	cpse	r27, r1
 e24:	b5 c0       	rjmp	.+362    	; 0xf90 <__fp_szero>
 e26:	08 95       	ret

00000e28 <__fixunssfsi>:
 e28:	98 d0       	rcall	.+304    	; 0xf5a <__fp_splitA>
 e2a:	88 f0       	brcs	.+34     	; 0xe4e <__fixunssfsi+0x26>
 e2c:	9f 57       	subi	r25, 0x7F	; 127
 e2e:	90 f0       	brcs	.+36     	; 0xe54 <__fixunssfsi+0x2c>
 e30:	b9 2f       	mov	r27, r25
 e32:	99 27       	eor	r25, r25
 e34:	b7 51       	subi	r27, 0x17	; 23
 e36:	a0 f0       	brcs	.+40     	; 0xe60 <__fixunssfsi+0x38>
 e38:	d1 f0       	breq	.+52     	; 0xe6e <__fixunssfsi+0x46>
 e3a:	66 0f       	add	r22, r22
 e3c:	77 1f       	adc	r23, r23
 e3e:	88 1f       	adc	r24, r24
 e40:	99 1f       	adc	r25, r25
 e42:	1a f0       	brmi	.+6      	; 0xe4a <__fixunssfsi+0x22>
 e44:	ba 95       	dec	r27
 e46:	c9 f7       	brne	.-14     	; 0xe3a <__fixunssfsi+0x12>
 e48:	12 c0       	rjmp	.+36     	; 0xe6e <__fixunssfsi+0x46>
 e4a:	b1 30       	cpi	r27, 0x01	; 1
 e4c:	81 f0       	breq	.+32     	; 0xe6e <__fixunssfsi+0x46>
 e4e:	9f d0       	rcall	.+318    	; 0xf8e <__fp_zero>
 e50:	b1 e0       	ldi	r27, 0x01	; 1
 e52:	08 95       	ret
 e54:	9c c0       	rjmp	.+312    	; 0xf8e <__fp_zero>
 e56:	67 2f       	mov	r22, r23
 e58:	78 2f       	mov	r23, r24
 e5a:	88 27       	eor	r24, r24
 e5c:	b8 5f       	subi	r27, 0xF8	; 248
 e5e:	39 f0       	breq	.+14     	; 0xe6e <__fixunssfsi+0x46>
 e60:	b9 3f       	cpi	r27, 0xF9	; 249
 e62:	cc f3       	brlt	.-14     	; 0xe56 <__fixunssfsi+0x2e>
 e64:	86 95       	lsr	r24
 e66:	77 95       	ror	r23
 e68:	67 95       	ror	r22
 e6a:	b3 95       	inc	r27
 e6c:	d9 f7       	brne	.-10     	; 0xe64 <__fixunssfsi+0x3c>
 e6e:	3e f4       	brtc	.+14     	; 0xe7e <__fixunssfsi+0x56>
 e70:	90 95       	com	r25
 e72:	80 95       	com	r24
 e74:	70 95       	com	r23
 e76:	61 95       	neg	r22
 e78:	7f 4f       	sbci	r23, 0xFF	; 255
 e7a:	8f 4f       	sbci	r24, 0xFF	; 255
 e7c:	9f 4f       	sbci	r25, 0xFF	; 255
 e7e:	08 95       	ret

00000e80 <__floatunsisf>:
 e80:	e8 94       	clt
 e82:	09 c0       	rjmp	.+18     	; 0xe96 <__floatsisf+0x12>

00000e84 <__floatsisf>:
 e84:	97 fb       	bst	r25, 7
 e86:	3e f4       	brtc	.+14     	; 0xe96 <__floatsisf+0x12>
 e88:	90 95       	com	r25
 e8a:	80 95       	com	r24
 e8c:	70 95       	com	r23
 e8e:	61 95       	neg	r22
 e90:	7f 4f       	sbci	r23, 0xFF	; 255
 e92:	8f 4f       	sbci	r24, 0xFF	; 255
 e94:	9f 4f       	sbci	r25, 0xFF	; 255
 e96:	99 23       	and	r25, r25
 e98:	a9 f0       	breq	.+42     	; 0xec4 <__floatsisf+0x40>
 e9a:	f9 2f       	mov	r31, r25
 e9c:	96 e9       	ldi	r25, 0x96	; 150
 e9e:	bb 27       	eor	r27, r27
 ea0:	93 95       	inc	r25
 ea2:	f6 95       	lsr	r31
 ea4:	87 95       	ror	r24
 ea6:	77 95       	ror	r23
 ea8:	67 95       	ror	r22
 eaa:	b7 95       	ror	r27
 eac:	f1 11       	cpse	r31, r1
 eae:	f8 cf       	rjmp	.-16     	; 0xea0 <__floatsisf+0x1c>
 eb0:	fa f4       	brpl	.+62     	; 0xef0 <__floatsisf+0x6c>
 eb2:	bb 0f       	add	r27, r27
 eb4:	11 f4       	brne	.+4      	; 0xeba <__floatsisf+0x36>
 eb6:	60 ff       	sbrs	r22, 0
 eb8:	1b c0       	rjmp	.+54     	; 0xef0 <__floatsisf+0x6c>
 eba:	6f 5f       	subi	r22, 0xFF	; 255
 ebc:	7f 4f       	sbci	r23, 0xFF	; 255
 ebe:	8f 4f       	sbci	r24, 0xFF	; 255
 ec0:	9f 4f       	sbci	r25, 0xFF	; 255
 ec2:	16 c0       	rjmp	.+44     	; 0xef0 <__floatsisf+0x6c>
 ec4:	88 23       	and	r24, r24
 ec6:	11 f0       	breq	.+4      	; 0xecc <__floatsisf+0x48>
 ec8:	96 e9       	ldi	r25, 0x96	; 150
 eca:	11 c0       	rjmp	.+34     	; 0xeee <__floatsisf+0x6a>
 ecc:	77 23       	and	r23, r23
 ece:	21 f0       	breq	.+8      	; 0xed8 <__floatsisf+0x54>
 ed0:	9e e8       	ldi	r25, 0x8E	; 142
 ed2:	87 2f       	mov	r24, r23
 ed4:	76 2f       	mov	r23, r22
 ed6:	05 c0       	rjmp	.+10     	; 0xee2 <__floatsisf+0x5e>
 ed8:	66 23       	and	r22, r22
 eda:	71 f0       	breq	.+28     	; 0xef8 <__floatsisf+0x74>
 edc:	96 e8       	ldi	r25, 0x86	; 134
 ede:	86 2f       	mov	r24, r22
 ee0:	70 e0       	ldi	r23, 0x00	; 0
 ee2:	60 e0       	ldi	r22, 0x00	; 0
 ee4:	2a f0       	brmi	.+10     	; 0xef0 <__floatsisf+0x6c>
 ee6:	9a 95       	dec	r25
 ee8:	66 0f       	add	r22, r22
 eea:	77 1f       	adc	r23, r23
 eec:	88 1f       	adc	r24, r24
 eee:	da f7       	brpl	.-10     	; 0xee6 <__floatsisf+0x62>
 ef0:	88 0f       	add	r24, r24
 ef2:	96 95       	lsr	r25
 ef4:	87 95       	ror	r24
 ef6:	97 f9       	bld	r25, 7
 ef8:	08 95       	ret

00000efa <__fp_inf>:
 efa:	97 f9       	bld	r25, 7
 efc:	9f 67       	ori	r25, 0x7F	; 127
 efe:	80 e8       	ldi	r24, 0x80	; 128
 f00:	70 e0       	ldi	r23, 0x00	; 0
 f02:	60 e0       	ldi	r22, 0x00	; 0
 f04:	08 95       	ret

00000f06 <__fp_nan>:
 f06:	9f ef       	ldi	r25, 0xFF	; 255
 f08:	80 ec       	ldi	r24, 0xC0	; 192
 f0a:	08 95       	ret

00000f0c <__fp_pscA>:
 f0c:	00 24       	eor	r0, r0
 f0e:	0a 94       	dec	r0
 f10:	16 16       	cp	r1, r22
 f12:	17 06       	cpc	r1, r23
 f14:	18 06       	cpc	r1, r24
 f16:	09 06       	cpc	r0, r25
 f18:	08 95       	ret

00000f1a <__fp_pscB>:
 f1a:	00 24       	eor	r0, r0
 f1c:	0a 94       	dec	r0
 f1e:	12 16       	cp	r1, r18
 f20:	13 06       	cpc	r1, r19
 f22:	14 06       	cpc	r1, r20
 f24:	05 06       	cpc	r0, r21
 f26:	08 95       	ret

00000f28 <__fp_round>:
 f28:	09 2e       	mov	r0, r25
 f2a:	03 94       	inc	r0
 f2c:	00 0c       	add	r0, r0
 f2e:	11 f4       	brne	.+4      	; 0xf34 <__fp_round+0xc>
 f30:	88 23       	and	r24, r24
 f32:	52 f0       	brmi	.+20     	; 0xf48 <__fp_round+0x20>
 f34:	bb 0f       	add	r27, r27
 f36:	40 f4       	brcc	.+16     	; 0xf48 <__fp_round+0x20>
 f38:	bf 2b       	or	r27, r31
 f3a:	11 f4       	brne	.+4      	; 0xf40 <__fp_round+0x18>
 f3c:	60 ff       	sbrs	r22, 0
 f3e:	04 c0       	rjmp	.+8      	; 0xf48 <__fp_round+0x20>
 f40:	6f 5f       	subi	r22, 0xFF	; 255
 f42:	7f 4f       	sbci	r23, 0xFF	; 255
 f44:	8f 4f       	sbci	r24, 0xFF	; 255
 f46:	9f 4f       	sbci	r25, 0xFF	; 255
 f48:	08 95       	ret

00000f4a <__fp_split3>:
 f4a:	57 fd       	sbrc	r21, 7
 f4c:	90 58       	subi	r25, 0x80	; 128
 f4e:	44 0f       	add	r20, r20
 f50:	55 1f       	adc	r21, r21
 f52:	59 f0       	breq	.+22     	; 0xf6a <__fp_splitA+0x10>
 f54:	5f 3f       	cpi	r21, 0xFF	; 255
 f56:	71 f0       	breq	.+28     	; 0xf74 <__fp_splitA+0x1a>
 f58:	47 95       	ror	r20

00000f5a <__fp_splitA>:
 f5a:	88 0f       	add	r24, r24
 f5c:	97 fb       	bst	r25, 7
 f5e:	99 1f       	adc	r25, r25
 f60:	61 f0       	breq	.+24     	; 0xf7a <__fp_splitA+0x20>
 f62:	9f 3f       	cpi	r25, 0xFF	; 255
 f64:	79 f0       	breq	.+30     	; 0xf84 <__fp_splitA+0x2a>
 f66:	87 95       	ror	r24
 f68:	08 95       	ret
 f6a:	12 16       	cp	r1, r18
 f6c:	13 06       	cpc	r1, r19
 f6e:	14 06       	cpc	r1, r20
 f70:	55 1f       	adc	r21, r21
 f72:	f2 cf       	rjmp	.-28     	; 0xf58 <__fp_split3+0xe>
 f74:	46 95       	lsr	r20
 f76:	f1 df       	rcall	.-30     	; 0xf5a <__fp_splitA>
 f78:	08 c0       	rjmp	.+16     	; 0xf8a <__fp_splitA+0x30>
 f7a:	16 16       	cp	r1, r22
 f7c:	17 06       	cpc	r1, r23
 f7e:	18 06       	cpc	r1, r24
 f80:	99 1f       	adc	r25, r25
 f82:	f1 cf       	rjmp	.-30     	; 0xf66 <__fp_splitA+0xc>
 f84:	86 95       	lsr	r24
 f86:	71 05       	cpc	r23, r1
 f88:	61 05       	cpc	r22, r1
 f8a:	08 94       	sec
 f8c:	08 95       	ret

00000f8e <__fp_zero>:
 f8e:	e8 94       	clt

00000f90 <__fp_szero>:
 f90:	bb 27       	eor	r27, r27
 f92:	66 27       	eor	r22, r22
 f94:	77 27       	eor	r23, r23
 f96:	cb 01       	movw	r24, r22
 f98:	97 f9       	bld	r25, 7
 f9a:	08 95       	ret

00000f9c <__udivmodhi4>:
 f9c:	aa 1b       	sub	r26, r26
 f9e:	bb 1b       	sub	r27, r27
 fa0:	51 e1       	ldi	r21, 0x11	; 17
 fa2:	07 c0       	rjmp	.+14     	; 0xfb2 <__udivmodhi4_ep>

00000fa4 <__udivmodhi4_loop>:
 fa4:	aa 1f       	adc	r26, r26
 fa6:	bb 1f       	adc	r27, r27
 fa8:	a6 17       	cp	r26, r22
 faa:	b7 07       	cpc	r27, r23
 fac:	10 f0       	brcs	.+4      	; 0xfb2 <__udivmodhi4_ep>
 fae:	a6 1b       	sub	r26, r22
 fb0:	b7 0b       	sbc	r27, r23

00000fb2 <__udivmodhi4_ep>:
 fb2:	88 1f       	adc	r24, r24
 fb4:	99 1f       	adc	r25, r25
 fb6:	5a 95       	dec	r21
 fb8:	a9 f7       	brne	.-22     	; 0xfa4 <__udivmodhi4_loop>
 fba:	80 95       	com	r24
 fbc:	90 95       	com	r25
 fbe:	bc 01       	movw	r22, r24
 fc0:	cd 01       	movw	r24, r26
 fc2:	08 95       	ret

00000fc4 <_exit>:
 fc4:	f8 94       	cli

00000fc6 <__stop_program>:
 fc6:	ff cf       	rjmp	.-2      	; 0xfc6 <__stop_program>
